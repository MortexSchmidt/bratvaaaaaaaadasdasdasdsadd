// –£–ª—É—á—à–µ–Ω–Ω—ã–π JavaScript —Ñ–∞–π–ª –¥–ª—è Mini-App "–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ 2.0"

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App API
let tg;
try {
 tg = window.Telegram.WebApp;
  tg.expand();
  tg.enableClosingConfirmation();
} catch (e) {
  console.log("Telegram Web App API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTheme = 'light';
let gameState = {
 screen: 'welcome',
  lobbyCode: '',
  playerName: '',
  players: [],
  currentPlayerIndex: 0,
  gameMode: 'clockwise', // clockwise –∏–ª–∏ anyone
  rulesMode: 'with', // with –∏–ª–∏ without
  difficultySetting: 'all', // all, safe, spicy, risky
  currentTask: null,
 taskType: null,
  targetPlayerId: null,
  passesUsed: {}, // –°—á–µ—Ç—á–∏–∫ –ø–∞—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  maxPasses: 1, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å–æ–≤ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
  gameActive: false
};

// DOM Elements
const screens = {
  welcome: document.getElementById('welcome-screen'),
  createLobby: document.getElementById('create-lobby-screen'),
  joinLobby: document.getElementById('join-lobby-screen'),
  lobby: document.getElementById('lobby-screen'),
  game: document.getElementById('game-screen'),
  taskSelection: document.getElementById('task-selection-screen')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º—É —Å–∏—Å—Ç–µ–º—ã
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    setTheme('dark');
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
  showScreen('welcome');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
  initializeTelegramWebApp();
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
  animateWelcomeProgress();
});

// –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenName) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
  Object.values(screens).forEach(screen => {
    screen.classList.remove('active');
 });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
  if (screens[screenName]) {
    screens[screenName].classList.add('active');
    gameState.screen = screenName;
  }
}

function showWelcome() {
  showScreen('welcome');
}

function showCreateLobby() {
  showScreen('createLobby');
}

function showJoinLobby() {
  showScreen('joinLobby');
}

function showLobby() {
  showScreen('lobby');
  updateLobbyInfo();
  animateLobbyProgress();
}

function showGame() {
  showScreen('game');
  updateGameInfo();
  animateGameProgress();
}

function showTaskSelection() {
  showScreen('taskSelection');
  updateTaskSelectionScreen();
}

function showQuickGame() {
  // –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - —Å–æ–∑–¥–∞–µ—Ç –ª–æ–±–±–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  gameState.playerName = "–ò–≥—Ä–æ–∫";
  gameState.gameMode = 'clockwise';
  gameState.rulesMode = 'with';
  gameState.difficultySetting = 'all';
  gameState.lobbyCode = generateLobbyCode();
  gameState.players = [{
    id: generatePlayerId(),
    name: gameState.playerName,
    isHost: true
  }];
  
  showNotification(`–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥: ${gameState.lobbyCode}`);
  showLobby();
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–æ–π
function toggleTheme() {
 currentTheme = currentTheme === 'light' ? 'dark' : 'light';
  setTheme(currentTheme);
}

function setTheme(theme) {
 currentTheme = theme;
  document.documentElement.setAttribute('data-theme', theme);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–µ–º—ã
  const themeIcon = document.getElementById('theme-icon');
  if (themeIcon) {
    themeIcon.textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã
  localStorage.setItem('theme', theme);
}

// –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ª–æ–±–±–∏
function createLobby() {
  const playerNameInput = document.getElementById('player-name');
  const playerName = playerNameInput.value.trim();
  
  if (!playerName) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
    return;
  }
  
  if (playerName.length > 30) {
    showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∂–∏–º—ã
  const gameMode = document.querySelector('input[name="game-mode"]:checked').value;
  const rulesMode = document.querySelector('input[name="rules-mode"]:checked').value;
  const difficultySetting = document.getElementById('difficulty-setting').value;
  
  // –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
  gameState.playerName = playerName;
  gameState.gameMode = gameMode;
  gameState.rulesMode = rulesMode;
 gameState.difficultySetting = difficultySetting;
  gameState.lobbyCode = generateLobbyCode();
  gameState.players = [{
    id: generatePlayerId(),
    name: playerName,
    isHost: true
  }];
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
  gameState.maxPasses = rulesMode === 'with' ? 1 : Infinity;
  
  showNotification(`–õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ! –ö–æ–¥: ${gameState.lobbyCode}`);
  showLobby();
}

function joinLobby() {
 const playerNameInput = document.getElementById('join-player-name');
  const lobbyCodeInput = document.getElementById('lobby-code');
  
  const playerName = playerNameInput.value.trim();
  const lobbyCode = lobbyCodeInput.value.trim().toUpperCase();
  
  if (!playerName) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
    return;
  }
  
  if (playerName.length > 30) {
    showNotification('–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }
  
  if (!lobbyCode || lobbyCode.length !== 6) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ª–æ–±–±–∏');
    return;
  }
  
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ª–æ–±–±–∏
 // –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  gameState.playerName = playerName;
  gameState.lobbyCode = lobbyCode;
 gameState.players = [
    {
      id: generatePlayerId(),
      name: playerName,
      isHost: false
    },
    {
      id: generatePlayerId(),
      name: "–ò–≥—Ä–æ–∫ 2",
      isHost: true
    }
  ];
  
  showNotification('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ª–æ–±–±–∏!');
  showLobby();
}

function startGame() {
  if (gameState.players.length < 2) {
    showNotification('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
    return;
  }
  
  gameState.gameActive = true;
  gameState.passesUsed = {}; // –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–∞—Å–æ–≤
 gameState.players.forEach(player => {
    gameState.passesUsed[player.id] = 0;
  });
  
  showNotification('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!');
  showGame();
}

function endGame() {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É?')) {
    gameState.gameActive = false;
    showLobby();
    showNotification('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }
}

function leaveLobby() {
  if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –ª–æ–±–±–∏?')) {
    gameState.players = [];
    gameState.lobbyCode = '';
    gameState.gameActive = false;
    showWelcome();
    showNotification('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –ª–æ–±–±–∏');
  }
}

function copyLobbyCode() {
  if (navigator.clipboard) {
    navigator.clipboard.writeText(gameState.lobbyCode).then(() => {
      showNotification('–ö–æ–¥ –ª–æ–±–±–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }).catch(err => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ', err);
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
    });
  } else {
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const textArea = document.createElement("textarea");
    textArea.value = gameState.lobbyCode;
    document.body.appendChild(textArea);
    textArea.select();
    try {
      document.execCommand('copy');
      showNotification('–ö–æ–¥ –ª–æ–±–±–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    } catch (err) {
      showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥');
    }
    document.body.removeChild(textArea);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
function updateLobbyInfo() {
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–±–±–∏
  const lobbyCodeDisplay = document.getElementById('lobby-code-display');
  const playerCountDisplay = document.getElementById('player-count');
  const startGameBtn = document.getElementById('start-game-btn');
  const playersList = document.getElementById('players-list');
  
  if (lobbyCodeDisplay) {
    lobbyCodeDisplay.textContent = `–ö–æ–¥: ${gameState.lobbyCode}`;
  }
  
  if (playerCountDisplay) {
    playerCountDisplay.textContent = `–ò–≥—Ä–æ–∫–æ–≤: ${gameState.players.length}/8`;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  if (startGameBtn) {
    startGameBtn.disabled = gameState.players.length < 2;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
  if (playersList) {
    playersList.innerHTML = '';
    gameState.players.forEach((player, index) => {
      const playerElement = document.createElement('div');
      playerElement.className = `player-item ${player.isHost ? 'host' : ''}`;
      playerElement.innerHTML = `
        <span class="player-name">${player.name} ${player.isHost ? '(–í—ã)' : ''}</span>
        ${player.isHost ? '<span class="host-badge">üëë</span>' : ''}
      `;
      playersList.appendChild(playerElement);
    });
  }
}

function updateGameInfo() {
  const currentPlayerDisplay = document.getElementById('current-player');
  const gameModeDisplay = document.getElementById('game-mode');
  
  if (currentPlayerDisplay) {
    const currentPlayer = gameState.players[gameState.currentPlayerIndex];
    currentPlayerDisplay.textContent = `–•–æ–¥: ${currentPlayer.name}`;
  }
  
  if (gameModeDisplay) {
    const modeText = gameState.gameMode === 'clockwise' ? '–ü–æ —á–∞—Å–æ–≤–æ–π' : '–ö–æ–º—É —É–≥–æ–¥–Ω–æ';
    gameModeDisplay.textContent = `–†–µ–∂–∏–º: ${modeText}`;
  }
  
  updatePlayersGrid();
}

function updatePlayersGrid() {
  const playersGrid = document.getElementById('players-grid');
  if (!playersGrid) return;
  
  playersGrid.innerHTML = '';
  
  gameState.players.forEach((player, index) => {
    const playerCard = document.createElement('div');
    playerCard.className = `player-card ${index === gameState.currentPlayerIndex ? 'active' : ''}`;
    playerCard.innerHTML = `
      <div class="player-avatar">üë§</div>
      <div class="player-name">${player.name}</div>
      ${index === gameState.currentPlayerIndex ? '<div class="player-status">–•–æ–¥</div>' : ''}
    `;
    playersGrid.appendChild(playerCard);
  });
}

function updateTaskSelectionScreen() {
  const targetPlayer = gameState.players[gameState.currentPlayerIndex];
  const targetPlayerName = document.getElementById('target-player-name');
  const taskTypeLabel = document.getElementById('task-type-label');
  
  if (targetPlayerName) {
    targetPlayerName.textContent = targetPlayer.name;
  }
  
  if (taskTypeLabel) {
    taskTypeLabel.textContent = gameState.taskType === 'truth' ? 
      '–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è "–ü—Ä–∞–≤–¥—ã":' : 
      '–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è "–î–µ–π—Å—Ç–≤–∏—è":';
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏–π
function selectChoice(choiceType) {
  const choices = {
    truth: { icon: 'üí°', label: '–ü—Ä–∞–≤–¥–∞', color: '#4361ee' },
    dare: { icon: 'üé≠', label: '–î–µ–π—Å—Ç–≤–∏–µ', color: '#f72585' },
    random: { icon: 'üé≤', label: '–°–ª—É—á–∞–π–Ω–æ–µ', color: '#4cc9f0' },
    pass: { icon: '‚è≠Ô∏è', label: '–ü–∞—Å', color: '#7209b7' }
  };
  
  const choice = choices[choiceType];
  if (!choice) return;
  
  if (choiceType === 'pass') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Å
    const currentPlayer = gameState.players[gameState.currentPlayerIndex];
    if (gameState.passesUsed[currentPlayer.id] >= gameState.maxPasses) {
      showNotification('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å–æ–≤!');
      return;
    }
    
    gameState.passesUsed[currentPlayer.id] += 1;
    showNotification(`–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–∞—Å!`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    nextPlayer();
  } else if (choiceType === 'random') {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const randomType = Math.random() > 0.5 ? 'truth' : 'dare';
    const randomContent = getRandomContent(randomType);
    
    showNotification(`–°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${randomContent}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞–Ω–∏—è
    showTaskCard(randomType, randomContent);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
    nextPlayer();
  } else {
    // –î–ª—è "–ü—Ä–∞–≤–¥—ã" –∏–ª–∏ "–î–µ–π—Å—Ç–≤–∏—è" –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    gameState.taskType = choiceType;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (gameState.gameMode === 'clockwise') {
      gameState.targetPlayerId = (gameState.currentPlayerIndex + 1) % gameState.players.length;
    } else {
      // –í —Ä–µ–∂–∏–º–µ "–∫–æ–º—É —É–≥–æ–¥–Ω–æ" –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞
      // –ü–æ–∫–∞ —É–ø—Ä–æ—â–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
      gameState.targetPlayerId = (gameState.currentPlayerIndex + 1) % gameState.players.length;
    }
    
    showTaskSelection();
  }
}

function getRandomContent(type) {
  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
 if (type === 'truth') {
    const truths = [
      "–ö–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –º–µ–º –≤ TikTok?",
      "–ö–∞–∫–∞—è –ø–µ—Å–Ω—è –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
      "–ï—Å–ª–∏ –±—ã —Ç—ã –º–æ–≥ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∫—É–¥–∞ —É–≥–æ–¥–Ω–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, –∫—É–¥–∞ –±—ã –ø–æ–µ—Ö–∞–ª?",
      "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–∞–º—ã–π —Å–º–µ—à–Ω–æ–π –Ω–∞–≤—ã–∫?",
      "–ï—Å–ª–∏ –±—ã —Ç—ã –≤—ã–∏–≥—Ä–∞–ª –º–∏–ª–ª–∏–æ–Ω, —á—Ç–æ –±—ã –∫—É–ø–∏–ª –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º?"
    ];
    return truths[Math.floor(Math.random() * truths.length)];
  } else {
    const dares = [
      "–°–ø–æ–π –∫—É–ø–ª–µ—Ç —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏ –≥–æ–ª–æ—Å–æ–º —Ä–æ–±–æ—Ç–∞",
      "–°–¥–µ–ª–∞–π 10 —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –ø–æ–¥ –≤–æ–æ–±—Ä–∞–∂–∞–µ–º—É—é –º—É–∑—ã–∫—É",
      "–ù–∞–ø–∏—à–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–≥—Ä—ã –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
      "–ò–∑–æ–±—Ä–∞–∑–∏ –ø–æ–∑—É –π–æ–≥–∏ '–¥–µ—Ä–µ–≤–æ' –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π 10 —Å–µ–∫—É–Ω–¥",
      "–°–¥–µ–ª–∞–π —Å–µ–ª—Ñ–∏ —Å —Å–∞–º–æ–π –≥–ª—É–ø–æ–π –≥—Ä–∏–º–∞—Å–æ–π"
    ];
    return dares[Math.floor(Math.random() * dares.length)];
  }
}

function showTaskCard(type, content) {
  const container = document.getElementById('task-card-container');
  const card = document.getElementById('task-card');
  const taskContent = document.getElementById('task-content');
  
  if (container && taskContent) {
    container.style.display = 'block';
    taskContent.textContent = content;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    setTimeout(() => {
      if (card) {
        card.classList.add('flipped');
      }
    }, 500);
  }
}

function sendTask() {
  const taskInput = document.getElementById('task-input');
  const taskContent = taskInput.value.trim();
  
  if (!taskContent) {
    showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ');
    return;
  }
  
  if (taskContent.length > 200) {
    showNotification('–ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤');
    return;
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤)
  showNotification(`–ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É!`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–¥–∞–Ω–∏—è
  showTaskCard(gameState.taskType, taskContent);
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
  nextPlayer();
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏–≥—Ä—É
 showGame();
}

function setDifficulty(difficulty) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  gameState.difficultySetting = difficulty;
  showNotification(`–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${getDifficultyName(difficulty)}`);
}

function getDifficultyName(difficulty) {
  const names = {
    'safe': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ',
    'spicy': '–û—Å—Ç—Ä–æ',
    'risky': '–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ',
    'all': '–í—Å–µ —É—Ä–æ–≤–Ω–∏'
  };
 return names[difficulty] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function nextPlayer() {
  gameState.currentPlayerIndex = (gameState.currentPlayerIndex + 1) % gameState.players.length;
  updateGameInfo();
  showNotification('–•–æ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateLobbyCode() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
 const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

function generatePlayerId() {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–≥—Ä–æ–∫–∞
  return Date.now() + Math.floor(Math.random() * 10000);
}

function showNotification(message) {
  const notification = document.getElementById('notification');
  const notificationText = document.getElementById('notification-text');
  
  if (notification && notificationText) {
    notificationText.textContent = message;
    notification.classList.add('show');
    
    setTimeout(() => {
      notification.classList.remove('show');
    }, 3000);
 }
  
  // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Web App API
  if (tg) {
    tg.showPopup({
      title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      message: message,
      buttons: [{type: 'ok'}]
    });
 }
}

// –ê–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function animateWelcomeProgress() {
  const progressBar = document.getElementById('welcome-progress');
  if (progressBar) {
    progressBar.style.width = '0%';
    setTimeout(() => {
      progressBar.style.width = '100%';
    }, 300);
  }
}

function animateLobbyProgress() {
  const progressBar = document.getElementById('lobby-progress');
  if (progressBar) {
    progressBar.style.width = '0%';
    setTimeout(() => {
      progressBar.style.width = '100%';
    }, 300);
  }
}

function animateGameProgress() {
  const progressBar = document.getElementById('game-progress');
  if (progressBar) {
    progressBar.style.width = '0%';
    setTimeout(() => {
      progressBar.style.width = '100%';
    }, 300);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
function initializeTelegramWebApp() {
  if (tg) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
    document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
    document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
    document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
    document.documentElement.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#4361ee');
    document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#4361ee');
    document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
    tg.onEvent('themeChanged', () => {
      const isDark = tg.colorScheme === 'dark';
      setTheme(isDark ? 'dark' : 'light');
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('click', function(e) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ radio –∫–Ω–æ–ø–∫–∞–º
  if (e.target.classList.contains('radio-option')) {
    const input = e.target.querySelector('input');
    if (input) {
      input.checked = true;
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('visibilitychange', function() {
  if (!document.hidden && tg) {
    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–ª–∞ –≤–∏–¥–∏–º–æ–π
    tg.ready();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
if (tg) {
  tg.BackButton.onClick(() => {
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    switch (gameState.screen) {
      case 'createLobby':
      case 'joinLobby':
        showWelcome();
        break;
      case 'taskSelection':
        showGame();
        break;
      case 'game':
        showLobby();
        break;
      case 'lobby':
        showWelcome();
        break;
      default:
        showWelcome();
    }
 });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
  if (gameState.screen !== 'welcome') {
    tg.BackButton.show();
  }
}