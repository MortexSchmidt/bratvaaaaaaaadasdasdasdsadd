from __future__ import annotations
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import sqlite3
import os
from datetime import datetime, timedelta
from typing import Dict
from .. import format_user_mention

router = Router(name="dr–æ—á–∫–∞")

# Database file - use /app/data for persistent storage on Railway
DB_FILE = os.path.join(os.getenv("DB_DIR", "."), "drochka_data.db")

def init_db():
    """Initialize the database"""
    # Ensure the directory exists
    os.makedirs(os.path.dirname(DB_FILE), exist_ok=True)
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id TEXT PRIMARY KEY,
            username TEXT,
            last_dr–æ—á–∫–∞ TEXT,
            total_dr–æ—á–∫–∞ INTEGER DEFAULT 0,
            current_streak INTEGER DEFAULT 0,
            max_streak INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def load_data() -> Dict:
    """Load user data from database"""
    init_db()  # Ensure DB is initialized
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak FROM user_stats')
    rows = cursor.fetchall()
    conn.close()
    
    data = {}
    for row in rows:
        user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak = row
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": last_dr–æ—á–∫–∞,
            "total_dr–æ—á–∫–∞": total_dr–æ—á–∫–∞,
            "current_streak": current_streak,
            "max_streak": max_streak
        }
    return data

def save_user_data(user_id: str, username: str, last_dr–æ—á–∫–∞: str, total_dr–æ—á–∫–∞: int, current_streak: int, max_streak: int):
    """Save user data to database"""
    init_db()  # Ensure DB is initialized
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak))
    conn.commit()
    conn.close()

async def perform_dr–æ—á–∫–∞(message: Message):
    """Perform the dr–æ—á–∫–∞ action"""
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º"
    
    data = load_data()
    
    # Initialize user data if not exists
    if user_id not in data:
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": None,
            "total_dr–æ—á–∫–∞": 0,
            "current_streak": 0,
            "max_streak": 0
        }
    
    user_data = data[user_id]
    
    # Check if user can dr–æ—á–∏—Ç—å today
    can_dr–æ—á–∏—Ç—å = True
    current_time = datetime.now()
    
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        if current_time.date() == last_time.date():
            can_dr–æ—á–∏—Ç—å = False
    
    if can_dr–æ—á–∏—Ç—å:
        # Update stats
        user_data["username"] = username
        user_data["last_dr–æ—á–∫–∞"] = current_time.isoformat()
        user_data["total_dr–æ—á–∫–∞"] += 1
        user_data["current_streak"] += 1
        
        # Update max streak if needed
        if user_data["current_streak"] > user_data["max_streak"]:
            user_data["max_streak"] = user_data["current_streak"]
        
        # Save to database
        save_user_data(
            user_id,
            username,
            user_data["last_dr–æ—á–∫–∞"],
            user_data["total_dr–æ—á–∫–∞"],
            user_data["current_streak"],
            user_data["max_streak"]
        )

        user_mention = format_user_mention(message.from_user)
        response = f"üî• {user_mention} —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥—Ä–æ—á–∏–ª!\n\n"
        response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
        response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']}\n"
        response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_data['max_streak']}"
    else:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        next_time = (last_time + timedelta(days=1)).date()
        time_left = datetime.combine(next_time, datetime.min.time()) - current_time
        
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        user_mention = format_user_mention(message.from_user)
        response = f"‚è≥ {user_mention}, —Ç—ã —É–∂–µ –¥—Ä–æ—á–∏–ª —Å–µ–≥–æ–¥–Ω—è!\n"
        response += f"–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑: {hours} —á {minutes} –º–∏–Ω"
    
    await message.answer(response)

@router.message(Command(commands=["–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∏—Ç—å", "drochka"]))
async def cmd_dr–æ—á–∫–∞(message: Message):
    await perform_dr–æ—á–∫–∞(message)

# React to the word "–¥—Ä–æ—á" in messages
@router.message(lambda message: message.text and "–¥—Ä–æ—á" in message.text.lower())
async def word_dr–æ—á(message: Message):
    await perform_dr–æ—á–∫–∞(message)

@router.message(Command(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∫–∞_—Å—Ç–∞—Ç—ã", "drochka_stats"]))
async def cmd_dr–æ—á–∫–∞_stats(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        await message.answer("–¢—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –¥—Ä–æ—á–∏–ª! –ò—Å–ø–æ–ª—å–∑—É–π /–¥—Ä–æ—á–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    user_data = data[user_id]
    user_mention = format_user_mention(message.from_user)

    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ—á–∫–∏ –¥–ª—è {user_mention}:\n\n"
    response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
    response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']}\n"
    response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_data['max_streak']}\n"
    
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        response += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–æ—á–æ–∫: {last_time.strftime('%d.%m.%Y %H:%M')}"
    
    await message.answer(response)