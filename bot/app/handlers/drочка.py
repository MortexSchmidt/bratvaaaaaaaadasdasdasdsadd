from __future__ import annotations
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import sqlite3
import os
from datetime import datetime, timedelta
import asyncio
from typing import Dict
from .. import format_user_mention

router = Router(name="dr–æ—á–∫–∞")

# Database file - use /app/data for persistent storage on Railway
DB_FILE = os.path.join(os.getenv("DB_DIR", "."), "drochka_data.db")

def init_db():
    """Initialize the database"""
    # Ensure the directory exists
    os.makedirs(os.path.dirname(DB_FILE), exist_ok=True)
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_stats (
            user_id TEXT PRIMARY KEY,
            username TEXT,
            last_dr–æ—á–∫–∞ TEXT,
            total_dr–æ—á–∫–∞ INTEGER DEFAULT 0,
            current_streak INTEGER DEFAULT 0,
            max_streak INTEGER DEFAULT 0,
            pet_name TEXT,
            break_notified INTEGER DEFAULT 0
        )
    ''')
    # –ú–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ª–±–µ—Ü pet_name –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å
    cursor.execute("PRAGMA table_info(user_stats)")
    cols = [r[1] for r in cursor.fetchall()]
    if 'pet_name' not in cols:
        cursor.execute("ALTER TABLE user_stats ADD COLUMN pet_name TEXT")
    if 'break_notified' not in cols:
        cursor.execute("ALTER TABLE user_stats ADD COLUMN break_notified INTEGER DEFAULT 0")
    # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_achievements (
            user_id TEXT,
            code TEXT,
            earned_at TEXT,
            PRIMARY KEY (user_id, code)
        )
    ''')
    conn.commit()
    conn.close()

def load_data() -> Dict:
    """Load user data from database"""
    init_db()  # Ensure DB is initialized
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak, COALESCE(pet_name, ""), break_notified FROM user_stats')
    rows = cursor.fetchall()
    conn.close()
    
    data = {}
    for row in rows:
        user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak, pet_name, break_notified = row
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": last_dr–æ—á–∫–∞,
            "total_dr–æ—á–∫–∞": total_dr–æ—á–∫–∞,
            "current_streak": current_streak,
            "max_streak": max_streak,
            "pet_name": pet_name or None,
            "break_notified": break_notified or 0
        }
    return data

def save_user_data(user_id: str, username: str, last_dr–æ—á–∫–∞: str, total_dr–æ—á–∫–∞: int, current_streak: int, max_streak: int, pet_name: str | None, break_notified: int = 0):
    """Save user data to database"""
    init_db()  # Ensure DB is initialized
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO user_stats 
        (user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak, pet_name, break_notified)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (user_id, username, last_dr–æ—á–∫–∞, total_dr–æ—á–∫–∞, current_streak, max_streak, pet_name, break_notified))
    conn.commit()
    conn.close()

def has_achievement(user_id: str, code: str) -> bool:
    init_db()
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('SELECT 1 FROM user_achievements WHERE user_id=? AND code=?', (user_id, code))
    ok = cur.fetchone() is not None
    conn.close()
    return ok

def award_achievement(user_id: str, code: str):
    if has_achievement(user_id, code):
        return False
    init_db()
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('INSERT OR REPLACE INTO user_achievements(user_id, code, earned_at) VALUES (?,?,?)', (user_id, code, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()
    return True

ACHIEVEMENTS = {
    'streak_5': 'üî• –°–µ—Ä–∏—è 5! –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –ø—Ä–∏–≤—ã–∫–∞—Ç—å‚Ä¶',
    'streak_10': '‚ö° –°–µ—Ä–∏—è 10! –¢—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —É–ø–æ—Ä–Ω—ã–π.',
    'streak_30': 'üèÜ –°–µ—Ä–∏—è 30! –õ–µ–≥–µ–Ω–¥–∞ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤.'
}

async def perform_dr–æ—á–∫–∞(message: Message):
    """Perform the dr–æ—á–∫–∞ action"""
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º"
    
    data = load_data()
    
    # Initialize user data if not exists
    if user_id not in data:
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": None,
            "total_dr–æ—á–∫–∞": 0,
            "current_streak": 0,
            "max_streak": 0,
            "pet_name": None,
            "break_notified": 0
        }
    
    user_data = data[user_id]
    
    # Check if user can dr–æ—á–∏—Ç—å today
    can_dr–æ—á–∏—Ç—å = True
    now = datetime.now()
    today = now.date()
    last_time = None
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        if today == last_time.date():
            can_dr–æ—á–∏—Ç—å = False
    
    if can_dr–æ—á–∏—Ç—å:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞ –¥–ª—è —Å–µ—Ä–∏–∏ —Å –≥—Ä–∞—Ü–∏–µ–π 34 —á–∞—Å–∞ (1 –¥–µ–Ω—å 10 —á–∞—Å–æ–≤)
        if last_time:
            delta_hours = (now - last_time).total_seconds() / 3600
            # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 34 —á–∞—Å–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ‚Äî —Å–µ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞
            if delta_hours > 34:
                user_data['current_streak'] = 0
            # –ï—Å–ª–∏ –ø—Ä–æ—à—ë–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 34 —á–∞—Å–æ–≤ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            elif delta_hours <= 34 and delta_hours >= 24:
                # —ç—Ç–æ –¥–µ–Ω—å –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–∫–Ω–∞ ‚Äì –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
                pass
            elif delta_hours < 24:
                # —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è (–º—ã –±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ø—ã—Ç–∫—É –≤—ã—à–µ), –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                pass
            else:
                # delta_hours >34 —É–∂–µ –ø–æ–π–º–∞–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ (–±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—ã–≤)
                user_data['current_streak'] = 0
        # Update stats
        user_data["username"] = username
        user_data["last_dr–æ—á–∫–∞"] = now.isoformat()
        user_data["total_dr–æ—á–∫–∞"] += 1
        user_data["current_streak"] += 1
        user_data['break_notified'] = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        
        # Update max streak if needed
        if user_data["current_streak"] > user_data["max_streak"]:
            user_data["max_streak"] = user_data["current_streak"]
        
        # Save to database
        save_user_data(
            user_id,
            username,
            user_data["last_dr–æ—á–∫–∞"],
            user_data["total_dr–æ—á–∫–∞"],
            user_data["current_streak"],
            user_data["max_streak"],
            user_data.get("pet_name"),
            user_data.get('break_notified',0)
        )

        user_mention = format_user_mention(message.from_user)
        flame = "üî•" * min(user_data['current_streak'], 5)
        pet_part = f" –Ω–∞ —Å–≤–æ–µ–≥–æ '{user_data['pet_name']}'" if user_data.get('pet_name') else ""
        response = f"üî• {user_mention} –ø–æ–¥—Ä–æ—á–∏–ª{pet_part}! {flame}\n\n"
        response += "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
        response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']} (–º–∞–∫—Å: {user_data['max_streak']})"
        # Achievement check
        streak = user_data['current_streak']
        ach_to_check = []
        if streak in (5,10,30):
            ach_to_check.append(f'streak_{streak}')
        for code in ach_to_check:
            if award_achievement(user_id, code):
                try:
                    await message.bot.send_message(message.from_user.id, f"üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ACHIEVEMENTS[code]}")
                except Exception:
                    pass
    else:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        # –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
        midnight_next = datetime.combine(today + timedelta(days=1), datetime.min.time())
        delta = midnight_next - now
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        user_mention = format_user_mention(message.from_user)
        pet_part = f" —Å–≤–æ–µ–≥–æ '{user_data['pet_name']}'" if user_data.get('pet_name') else ""
        response = f"‚è≥ {user_mention}, —Ç—ã —É–∂–µ –¥—Ä–æ—á–∏–ª{pet_part} —Å–µ–≥–æ–¥–Ω—è!\n"
        response += f"–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ 00:00 (—á–µ—Ä–µ–∑ ~ {hours} —á {minutes} –º–∏–Ω)"
    
    await message.answer(response)

@router.message(Command(commands=["–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∏—Ç—å", "drochka"]))
async def cmd_dr–æ—á–∫–∞(message: Message):
    await perform_dr–æ—á–∫–∞(message)

# React to the word "–¥—Ä–æ—á" in messages
@router.message(lambda message: message.text and "–¥—Ä–æ—á" in message.text.lower())
async def word_dr–æ—á(message: Message):
    await perform_dr–æ—á–∫–∞(message)

@router.message(Command(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∫–∞_—Å—Ç–∞—Ç—ã", "drochka_stats"]))
async def cmd_dr–æ—á–∫–∞_stats(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        await message.answer("–¢—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –¥—Ä–æ—á–∏–ª! –ò—Å–ø–æ–ª—å–∑—É–π /–¥—Ä–æ—á–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    user_data = data[user_id]
    user_mention = format_user_mention(message.from_user)

    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ—á–∫–∏ –¥–ª—è {user_mention}:\n\n"
    if user_data.get('pet_name'):
        response += f"–ò–º—è –¥—Ä–æ—á–∏–∫–∞: {user_data['pet_name']}\n"
    response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
    response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']}\n"
    response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_data['max_streak']}\n"
    
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        response += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–æ—á–æ–∫: {last_time.strftime('%d.%m.%Y %H:%M')}"
    
    await message.answer(response)

@router.message(Command(commands=["–¥—Ä–æ—á–∏–∫_–∏–º—è","drochka_name","set_drochka_name"]))
async def cmd_set_pet_name(message: Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–¥—Ä–æ—á–∏–∫_–∏–º—è <–Ω–∞–∑–≤–∞–Ω–∏–µ> (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)")
    pet_name = parts[1].strip()
    if len(pet_name) > 30:
        return await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ (–º–∞–∫—Å 30)")
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º"
    data = load_data()
    if user_id not in data:
        # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": None,
            "total_dr–æ—á–∫–∞": 0,
            "current_streak": 0,
            "max_streak": 0,
            "pet_name": None
        }
    user = data[user_id]
    user['username'] = username
    user['pet_name'] = pet_name
    save_user_data(user_id, username, user['last_dr–æ—á–∫–∞'], user['total_dr–æ—á–∫–∞'], user['current_streak'], user['max_streak'], user['pet_name'])
    await message.answer(f"–ò–º—è –¥—Ä–æ—á–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {pet_name}")

@router.message(Command(commands=["drochka_top","drochka_leaders","–¥—Ä–æ—á–∫–∞_—Ç–æ–ø"]))
async def cmd_drochka_top(message: Message):
    init_db()
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('SELECT user_id, username, current_streak, max_streak, total_dr–æ—á–∫–∞ FROM user_stats ORDER BY current_streak DESC, max_streak DESC, total_dr–æ—á–∫–∞ DESC LIMIT 10')
    rows = cur.fetchall()
    conn.close()
    if not rows:
        return await message.answer("–ü–æ–∫–∞ –ø—É—Å—Ç–æ.")
    lines = ["üèÜ –¢–û–ü 10 –ø–æ —Ç–µ–∫—É—â–µ–π —Å–µ—Ä–∏–∏:"]
    for i,(uid, username, cur_st, max_st, total) in enumerate(rows, start=1):
        uname = username or uid
        lines.append(f"{i}. {uname} ‚Äî {cur_st}üî• (–º–∞–∫—Å {max_st}, –≤—Å–µ–≥–æ {total})")
    await message.answer("\n".join(lines))

@router.message(Command(commands=["drochka_achievements","–¥—Ä–æ—á–∫–∞_–∞—á–∏–≤–∫–∏"]))
async def cmd_drochka_achievements(message: Message):
    user_id = str(message.from_user.id)
    init_db()
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute('SELECT code, earned_at FROM user_achievements WHERE user_id=? ORDER BY earned_at', (user_id,))
    rows = cur.fetchall()
    conn.close()
    if not rows:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –î—Ä–æ—á—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å! üî•")
    lines=["üèÖ –¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:"]
    for code, ts in rows:
        desc = ACHIEVEMENTS.get(code, code)
        lines.append(f"‚Ä¢ {desc}")
    await message.answer("\n".join(lines))

async def check_breaks_and_notify(bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É –∫–æ–≥–æ –º–µ–∂–¥—Ä–æ—á–µ—á–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ >34—á ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º."""
    while True:
        try:
            init_db()
            conn = sqlite3.connect(DB_FILE)
            cur = conn.cursor()
            cur.execute('SELECT user_id, last_dr–æ—á–∫–∞, current_streak, break_notified FROM user_stats')
            rows = cur.fetchall()
            now = datetime.utcnow()
            changed = []
            for uid, last_ts, streak, notified in rows:
                if not last_ts or streak == 0:
                    continue
                try:
                    lt = datetime.fromisoformat(last_ts)
                except Exception:
                    continue
                delta_hours = (now - lt).total_seconds()/3600
                if delta_hours > 34 and not notified:
                    # —Å–±—Ä–æ—Å —Å–µ—Ä–∏–∏
                    changed.append(uid)
                    try:
                        await bot.send_message(int(uid), "üí§ –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (>34—á). –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ! üîÑ")
                    except Exception:
                        pass
            if changed:
                for uid in changed:
                    cur.execute('UPDATE user_stats SET current_streak=0, break_notified=1 WHERE user_id=?', (uid,))
                conn.commit()
            conn.close()
        except Exception:
            # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å
            pass
        await asyncio.sleep(3600)  # —Ä–∞–∑ –≤ —á–∞—Å