from __future__ import annotations
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import json
import os
from datetime import datetime, timedelta
from typing import Dict

router = Router(name="dr–æ—á–∫–∞")

# File to store user data
DATA_FILE = "dr–æ—á–∫–∞_data.json"

def load_data() -> Dict:
    """Load user data from file"""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def save_data(data: Dict):
    """Save user data to file"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@router.message(Command(commands=["–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∏—Ç—å"]))
async def cmd_dr–æ—á–∫–∞(message: Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.full_name or "–ê–Ω–æ–Ω–∏–º"
    
    data = load_data()
    
    # Initialize user data if not exists
    if user_id not in data:
        data[user_id] = {
            "username": username,
            "last_dr–æ—á–∫–∞": None,
            "total_dr–æ—á–∫–∞": 0,
            "current_streak": 0,
            "max_streak": 0
        }
    
    user_data = data[user_id]
    
    # Check if user can dr–æ—á–∏—Ç—å today
    can_dr–æ—á–∏—Ç—å = True
    current_time = datetime.now()
    
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        if current_time.date() == last_time.date():
            can_dr–æ—á–∏—Ç—å = False
    
    if can_dr–æ—á–∏—Ç—å:
        # Update stats
        user_data["username"] = username
        user_data["last_dr–æ—á–∫–∞"] = current_time.isoformat()
        user_data["total_dr–æ—á–∫–∞"] += 1
        user_data["current_streak"] += 1
        
        # Update max streak if needed
        if user_data["current_streak"] > user_data["max_streak"]:
            user_data["max_streak"] = user_data["current_streak"]
        
        save_data(data)
        
        response = f"üî• {username} —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥—Ä–æ—á–∏–ª!\n\n"
        response += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
        response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']}\n"
        response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_data['max_streak']}"
    else:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        next_time = (last_time + timedelta(days=1)).date()
        time_left = datetime.combine(next_time, datetime.min.time()) - current_time
        
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        response = f"‚è≥ {username}, —Ç—ã —É–∂–µ –¥—Ä–æ—á–∏–ª —Å–µ–≥–æ–¥–Ω—è!\n"
        response += f"–°–ª–µ–¥—É—é—â–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑: {hours} —á {minutes} –º–∏–Ω"
    
    await message.answer(response)

@router.message(Command(commands=["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–¥—Ä–æ—á–∫–∞", "–¥—Ä–æ—á–∫–∞_—Å—Ç–∞—Ç—ã"]))
async def cmd_dr–æ—á–∫–∞_stats(message: Message):
    user_id = str(message.from_user.id)
    data = load_data()
    
    if user_id not in data:
        await message.answer("–¢—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –¥—Ä–æ—á–∏–ª! –ò—Å–ø–æ–ª—å–∑—É–π /–¥—Ä–æ—á–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    
    user_data = data[user_id]
    username = user_data["username"]
    
    response = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—Ä–æ—á–∫–∏ –¥–ª—è {username}:\n\n"
    response += f"–í—Å–µ–≥–æ –¥—Ä–æ—á–∫–æ–≤: {user_data['total_dr–æ—á–∫–∞']}\n"
    response += f"–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {user_data['current_streak']}\n"
    response += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è: {user_data['max_streak']}\n"
    
    if user_data["last_dr–æ—á–∫–∞"]:
        last_time = datetime.fromisoformat(user_data["last_dr–æ—á–∫–∞"])
        response += f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥—Ä–æ—á–æ–∫: {last_time.strftime('%d.%m.%Y %H:%M')}"
    
    await message.answer(response)