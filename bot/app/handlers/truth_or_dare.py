"""Remaster Truth or Dare (—á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ mini-app –∏ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞)."""

from __future__ import annotations
import json, random
from pathlib import Path
from typing import Dict, List
from aiogram import Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router(name="truth_or_dare")

DATA_FILE = Path(__file__).parent / "truth_or_dare_content.json"
DEFAULT_TRUTHS = [
    "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Å—Ç—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –æ–±–æ –º–Ω–µ (–ø–æ —Ç–≤–æ–µ–º—É)?",
    "–ß–µ–≥–æ —Ç—ã —Å–µ–π—á–∞—Å –±–æ–∏—à—å—Å—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ß—Ç–æ –±—ã —Ç—ã —Å–¥–µ–ª–∞–ª(–∞), –±—É–¥—å —É —Ç–µ–±—è –æ–¥–∏–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π?",
    "–ö–∞–∫–æ–π —Å–∞–º—ã–π –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Ç—ã –∫–æ–≥–¥–∞‚Äë–ª–∏–±–æ –ø–æ–∫—É–ø–∞–ª(–∞)?",
    "–ß—Ç–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–±—è —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—Å–º–µ—à–∏–ª–æ?",
]
DEFAULT_DARES = [
    "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ —Å–∫–∞–∂–∏ '—è –º–æ—â—å'",
    "–ò–∑–æ–±—Ä–∞–∑–∏ —Ä–æ–±–æ—Ç–∞ –≤ —Å–≤–æ—ë–º —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
    "–°–∫–∞–∂–∏ –ª—é–±—É—é —Ñ—Ä–∞–∑—É –ó–õ–´–ú —à—ë–ø–æ—Ç–æ–º",
    "–ü–æ—Å—Ç–∞–≤—å –ª—é–±—É—é —Å–º–∞–π–ª—É –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –æ–Ω–∞ ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏",
    "–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ (–º–∏–Ω–∏–º—É–º 5 —à—Ç—É–∫)",
]

def load_content():
    if DATA_FILE.exists():
        try:
            data = json.loads(DATA_FILE.read_text(encoding="utf-8"))
            return (data.get("truths") or []) or DEFAULT_TRUTHS, (data.get("dares") or []) or DEFAULT_DARES
        except Exception:
            return DEFAULT_TRUTHS, DEFAULT_DARES
    return DEFAULT_TRUTHS, DEFAULT_DARES

TRUTHS, DARES = load_content()

MODE_CLOCKWISE = "clockwise"
MODE_ANYONE = "anyone"
RULES_WITH = "with_rules"
RULES_WITHOUT = "no_rules"

class TruthOrDareGame:
    def __init__(self, chat_id: int, players: List[int], player_names: Dict[int,str], creator_id: int, mode: str, rules_mode: str):
        self.chat_id = chat_id
        self.players = players
        self.player_names = player_names
        self.creator_id = creator_id
        self.mode = mode  # clockwise | anyone
        self.rules_mode = rules_mode  # with_rules | no_rules
        self.current_index = 0
        self.passes_used = {pid:0 for pid in players}
        self.phase = "waiting_action"  # waiting_action | select_target | task_active
        self.current_task: str | None = None
        self.current_task_type: str | None = None
        self.target_player_id: int | None = None
    def current_player_id(self): return self.players[self.current_index]
    def current_player_name(self): return self.player_names.get(self.current_player_id(), f"–ò–≥—Ä–æ–∫ {self.current_player_id()}")
    def next_player(self):
        self.current_index = (self.current_index + 1) % len(self.players)
        self.phase = "waiting_action"; self.current_task=None; self.current_task_type=None
    def pass_available(self, pid:int):
        if self.rules_mode == RULES_WITH:
            return self.passes_used.get(pid,0) < 1  # –æ–¥–∏–Ω –ø–∞—Å
        # –±–µ–∑ –ø—Ä–∞–≤–∏–ª –ø–∞—Å–æ–≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        return True
    def use_pass(self, pid:int): self.passes_used[pid]= self.passes_used.get(pid,0)+1

lobbies: Dict[int, dict] = {}
active_games: Dict[int, TruthOrDareGame] = {}
waiting_for_input: Dict[int, dict] = {}

def lobby_keyboard(is_creator: bool, mode: str, rules: str):
    kb=InlineKeyboardBuilder(); kb.button(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="tod:lobby:join")
    mode_label = "–†–µ–∂–∏–º: –ü–æ –∫—Ä—É–≥—É" if mode == MODE_CLOCKWISE else "–†–µ–∂–∏–º: –ö–æ–º—É —É–≥–æ–¥–Ω–æ"
    rules_label = "–ü—Ä–∞–≤–∏–ª–∞: –í–∫–ª" if rules == RULES_WITH else "–ü—Ä–∞–≤–∏–ª–∞: –í—ã–∫–ª"
    if is_creator:
        kb.button(text=mode_label, callback_data="tod:lobby:mode")
        kb.button(text=rules_label, callback_data="tod:lobby:rules")
        kb.button(text="–°—Ç–∞—Ä—Ç", callback_data="tod:lobby:start")
        kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="tod:lobby:cancel")
        kb.adjust(2,2)
    else:
        kb.adjust(1)
    return kb
def action_keyboard(game: TruthOrDareGame):
    kb=InlineKeyboardBuilder();
    kb.button(text="–ü—Ä–∞–≤–¥–∞", callback_data="tod:act:truth"); kb.button(text="–î–µ–π—Å—Ç–≤–∏–µ", callback_data="tod:act:dare"); kb.button(text="Random", callback_data="tod:act:random")
    if game.pass_available(game.current_player_id()): kb.button(text="–ü–∞—Å", callback_data="tod:act:pass")
    if game.creator_id == game.current_player_id(): kb.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="tod:act:end")
    kb.adjust(3,2); return kb
def next_keyboard(game: TruthOrDareGame):
    kb=InlineKeyboardBuilder(); kb.button(text="–î–∞–ª–µ–µ ‚ñ∂", callback_data="tod:next")
    if game.creator_id == game.current_player_id(): kb.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="tod:act:end")
    kb.adjust(2); return kb

def waiting_task_keyboard():
    kb=InlineKeyboardBuilder(); kb.button(text="–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="tod:done")
    return kb

def mention_name(uid:int, name:str): return f"<a href='tg://user?id={uid}'>{name}</a>"
def render_lobby_text(lobby:dict):
    lines=["üéâ <b>–õ–æ–±–±–∏ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ'</b>",""]
    mode_txt = "–ü–æ –∫—Ä—É–≥—É ‚è±" if lobby['mode']==MODE_CLOCKWISE else "–ö–æ–º—É —É–≥–æ–¥–Ω–æ üéØ"
    rules_txt = "–° –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚úÖ (1 –ø–∞—Å)" if lobby['rules']==RULES_WITH else "–ë–µ–∑ –ø—Ä–∞–≤–∏–ª ‚ôæ (–ø–∞—Å—ã –±–µ—Å–∫.)"
    lines.append(f"‚öôÔ∏è –†–µ–∂–∏–º: <b>{mode_txt}</b>")
    lines.append(f"üß∑ –ü—Ä–∞–≤–∏–ª–∞: <b>{rules_txt}</b>")
    lines.append("")
    lines.append(f"üë• –ò–≥—Ä–æ–∫–∏ ({len(lobby['players'])}):")
    for pid in lobby['players']:
        nm = lobby['player_names'][pid]
        lines.append(f"‚Ä¢ {mention_name(pid, nm)}")
    lines.append("\n–°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º –∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É.")
    return "\n".join(lines)
def random_truth(): return random.choice(TRUTHS)
def random_dare(): return random.choice(DARES)

@router.message(Command(commands=["truthordare","tod"]))
async def cmd_truth_or_dare(message: Message):
    chat_id=message.chat.id; user_id=message.from_user.id
    if message.chat.type not in {"group","supergroup"}: return await message.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
    if chat_id in active_games: return await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç")
    if chat_id in lobbies: return await message.answer("–õ–æ–±–±–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ")
    name= message.from_user.first_name or message.from_user.username or "–ò–≥—Ä–æ–∫"
    lobby={"creator":user_id,"players":[user_id],"player_names":{user_id:name},"message_id":None, "mode": MODE_CLOCKWISE, "rules": RULES_WITH}
    lobbies[chat_id]=lobby
    msg= await message.answer(render_lobby_text(lobby), parse_mode="HTML", reply_markup=lobby_keyboard(True, lobby['mode'], lobby['rules']).as_markup())
    lobby["message_id"]=msg.message_id

@router.callback_query()
async def tod_callbacks(cb: CallbackQuery, bot: Bot):
    if not cb.data or not cb.data.startswith("tod:"): return await cb.answer()
    parts=cb.data.split(":"); chat_id= cb.message.chat.id if cb.message else None; user_id= cb.from_user.id
    # lobby
    if parts[1]=="lobby":
        if chat_id not in lobbies: return await cb.answer("–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        lobby=lobbies[chat_id]; sub=parts[2]
        if sub=="join":
            if user_id not in lobby['players']:
                lobby['players'].append(user_id)
                lobby['player_names'][user_id]= cb.from_user.first_name or cb.from_user.username or "–ò–≥—Ä–æ–∫"
                await cb.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
            else:
                await cb.answer("–í—ã —É–∂–µ –≤ –ª–æ–±–±–∏")
            # –í–ê–ñ–ù–û: –≥—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ –¥–ª—è –≤—Å–µ—Ö, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–∑–¥–∞—Ç–µ–ª—è,
            # –∏–Ω–∞—á–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –æ–±—ã—á–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ–ø–∞–¥–∞—é—Ç –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ä—Ç' / '–ü—Ä–∞–≤–∏–ª–∞' / '–†–µ–∂–∏–º'.
            try:
                await bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=lobby['message_id'],
                    text=render_lobby_text(lobby),
                    reply_markup=lobby_keyboard(True, lobby['mode'], lobby['rules']).as_markup(),
                    parse_mode="HTML"
                )
            except Exception:
                pass
        elif sub=="mode":
            if user_id!=lobby['creator']: return await cb.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
            lobby['mode'] = MODE_ANYONE if lobby['mode']==MODE_CLOCKWISE else MODE_CLOCKWISE
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=lobby['message_id'], text=render_lobby_text(lobby), reply_markup=lobby_keyboard(True, lobby['mode'], lobby['rules']).as_markup(), parse_mode="HTML")
            except Exception: pass
            return await cb.answer("–†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω")
        elif sub=="rules":
            if user_id!=lobby['creator']: return await cb.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
            lobby['rules'] = RULES_WITHOUT if lobby['rules']==RULES_WITH else RULES_WITH
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=lobby['message_id'], text=render_lobby_text(lobby), reply_markup=lobby_keyboard(True, lobby['mode'], lobby['rules']).as_markup(), parse_mode="HTML")
            except Exception: pass
            return await cb.answer("–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã")
        elif sub=="start":
            if user_id!=lobby['creator']: return await cb.answer("–ù–µ —Ç—ã —Å–æ–∑–¥–∞–≤–∞–ª")
            if len(lobby['players'])<2: return await cb.answer("–ú–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞")
            game= TruthOrDareGame(chat_id,lobby['players'],lobby['player_names'],lobby['creator'], lobby['mode'], lobby['rules'])
            active_games[chat_id]=game; del lobbies[chat_id]
            mode_txt = "–ü–æ –∫—Ä—É–≥—É ‚è±" if game.mode==MODE_CLOCKWISE else "–ö–æ–º—É —É–≥–æ–¥–Ω–æ üéØ"
            rules_txt = "1 –ø–∞—Å (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)" if game.rules_mode==RULES_WITH else "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–∞—Å—ã"
            await cb.message.edit_text(
                f"üöÄ <b>–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n" \
                f"–†–µ–∂–∏–º: <b>{mode_txt}</b>\n" \
                f"–ü—Ä–∞–≤–∏–ª–∞: <b>{rules_txt}</b>\n" \
                f"–•–æ–¥: {mention_name(game.current_player_id(), game.current_player_name())}\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ.",
                parse_mode="HTML", reply_markup=action_keyboard(game).as_markup())
            await cb.answer()
        elif sub=="cancel":
            if user_id!=lobby['creator']: return await cb.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
            del lobbies[chat_id]; await cb.message.edit_text("–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ."); await cb.answer()
        return
    # action
    if parts[1]=="act":
        if chat_id not in active_games: return await cb.answer("–ò–≥—Ä—ã –Ω–µ—Ç", show_alert=True)
        game=active_games[chat_id]
        if user_id!=game.current_player_id(): return await cb.answer("–ù–µ —Ç–≤–æ–π —Ö–æ–¥")
        action=parts[2]
        if action=="end":
            if user_id!=game.creator_id: return await cb.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
            del active_games[chat_id]; await cb.message.edit_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."); return await cb.answer()
        if action=="pass":
            if not game.pass_available(user_id): return await cb.answer("–ü–∞—Å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            game.use_pass(user_id); game.next_player()
            await cb.message.edit_text(f"‚è≠ –ü–∞—Å! –•–æ–¥: {mention_name(game.current_player_id(), game.current_player_name())}", parse_mode="HTML", reply_markup=action_keyboard(game).as_markup()); return await cb.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
        if action in {"truth","dare","random"}:
            if action=="random": action=random.choice(["truth","dare"])
            game.current_task_type=action
            # CLOCKWISE: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –≤–≤–æ–¥ / –∞–≤—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–µ
            if game.mode==MODE_CLOCKWISE:
                target = game.players[(game.current_index+1)%len(game.players)]
                game.target_player_id = target
                if action == "random":
                    # —É–∂–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ truth/dare –≤—ã—à–µ
                    game.current_task = random_truth() if game.current_task_type=="truth" else random_dare()
                    game.phase="task_active"
                    await cb.message.edit_text(
                        f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {mention_name(target, game.player_names[target])} –≤ –ª–∏—á–∫—É (–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å ‚Äî –ø—É—Å—Ç—å –Ω–∞–∂–º—ë—Ç /start –≤ –õ–°).\n\n–û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è‚Ä¶",
                        parse_mode="HTML"
                    )
                    # –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ
                    try:
                        await cb.bot.send_message(target,
                            f"ü§´ –í–∞–º –ø—Ä–∏—à–ª–æ <b>{'–ü—Ä–∞–≤–¥–∞' if game.current_task_type=='truth' else '–î–µ–π—Å—Ç–≤–∏–µ'}</b> (—Å–ª—É—á–∞–π–Ω–æ–µ):\n\n{game.current_task}\n\n–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.",
                            parse_mode="HTML")
                        await cb.bot.send_message(game.chat_id,
                            f"üì® {mention_name(target, game.player_names[target])} –ø–æ–ª—É—á–∏–ª(–∞) —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!",
                            parse_mode="HTML")
                    except Exception:
                        await cb.bot.send_message(game.chat_id,
                            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {mention_name(target, game.player_names[target])}. –û–Ω/–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω(–∞) –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –≤ –õ–°.",
                            parse_mode="HTML")
                    # –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                    await cb.message.answer(
                        f"‚è≥ –ñ–¥—ë–º {mention_name(target, game.player_names[target])}‚Ä¶",
                        parse_mode="HTML",
                        reply_markup=waiting_task_keyboard().as_markup()
                    )
                    return await cb.answer()
                else:
                    # –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –õ–° –≤–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                    game.phase = "awaiting_content"
                    waiting_for_input[user_id] = {
                        "type": game.current_task_type,
                        "target": target,
                        "chat_id": chat_id
                    }
                    await cb.answer("–ñ–¥—É —Ç–µ–∫—Å—Ç –≤ –õ–°")
                    try:
                        await cb.bot.send_message(user_id,
                            f"‚úçÔ∏è –í–≤–µ–¥–∏ {'–≤–æ–ø—Ä–æ—Å (–ü—Ä–∞–≤–¥–∞)' if action=='truth' else '–∑–∞–¥–∞–Ω–∏–µ (–î–µ–π—Å—Ç–≤–∏–µ)'} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {game.player_names[target]}\n\n–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
                    except Exception:
                        await cb.message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –õ–° /start —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–∫—Å—Ç.")
                    await cb.message.edit_text(
                        f"üïµÔ∏è {mention_name(user_id, game.player_names[user_id])} –ø–∏—à–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {mention_name(target, game.player_names[target])}‚Ä¶",
                        parse_mode="HTML"
                    )
                    return
            # ANYONE: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä —Ü–µ–ª–∏
            if game.mode==MODE_ANYONE:
                game.phase="select_target"
                # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–≥—Ä–æ–∫–æ–≤
                kb=InlineKeyboardBuilder()
                for pid in game.players:
                    if pid==user_id: continue
                    kb.button(text=game.player_names[pid], callback_data=f"tod:target:{pid}")
                kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="tod:act:cancel")
                kb.adjust(2)
                label = "–ü—Ä–∞–≤–¥–∞" if action=="truth" else "–î–µ–π—Å—Ç–≤–∏–µ"
                await cb.message.edit_text(
                    f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –¥–ª—è: <b>{label}</b>\n",
                    parse_mode="HTML", reply_markup=kb.as_markup())
                return await cb.answer()
            # CLOCKWISE ‚Äî —Ü–µ–ª—å —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫
            target = game.players[(game.current_index+1)%len(game.players)]
            game.target_player_id = target
            game.current_task = random_truth() if action=="truth" else random_dare()
            game.phase="task_active"
            label = "–ü—Ä–∞–≤–¥–∞" if action=="truth" else "–î–µ–π—Å—Ç–≤–∏–µ"
            await cb.message.edit_text(
                f"üé≤ <b>{label}</b> –¥–ª—è {mention_name(target, game.player_names[target])}:\n\n<i>{game.current_task}</i>\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.",
                parse_mode="HTML", reply_markup=next_keyboard(game).as_markup())
            return await cb.answer()
        return
    # –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –≤ —Ä–µ–∂–∏–º–µ ANYONE
    if parts[1]=="target":
        if chat_id not in active_games: return await cb.answer()
        game=active_games[chat_id]
        if user_id!=game.current_player_id(): return await cb.answer("–ù–µ —Ç–≤–æ–π —Ö–æ–¥")
        if game.mode!=MODE_ANYONE or game.phase!="select_target": return await cb.answer()
        try:
            target_id = int(parts[2])
        except ValueError:
            return await cb.answer()
        if target_id not in game.players or target_id==user_id: return await cb.answer()
        game.target_player_id = target_id
        game.current_task = random_truth() if game.current_task_type=="truth" else random_dare()
        game.phase="task_active"
        label = "–ü—Ä–∞–≤–¥–∞" if game.current_task_type=="truth" else "–î–µ–π—Å—Ç–≤–∏–µ"
        await cb.message.edit_text(
            f"üé≤ <b>{label}</b> –¥–ª—è {mention_name(target_id, game.player_names[target_id])}:\n\n<i>{game.current_task}</i>\n\n–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ'.",
            parse_mode="HTML", reply_markup=next_keyboard(game).as_markup())
        return await cb.answer()
    if parts[1]=="next":
        if chat_id not in active_games: return await cb.answer()
        game=active_games[chat_id]
        if user_id!=game.current_player_id(): return await cb.answer("–ù–µ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–ª")
        if game.phase!="task_active": return await cb.answer()
        # –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: —Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –±—ã–ª —Ü–µ–ª—å—é (–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –¥–≤–∏–≥–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ)
        if game.target_player_id and game.target_player_id in game.players:
            game.current_index = game.players.index(game.target_player_id)
        # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–∞–ª—å—à–µ
        game.phase = "waiting_action"
        game.current_task = None
        game.current_task_type = None
        game.target_player_id = None
        await cb.message.edit_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–µ–ø–µ—Ä—å —Ö–æ–¥: {mention_name(game.current_player_id(), game.current_player_name())}", parse_mode="HTML", reply_markup=action_keyboard(game).as_markup()); return await cb.answer()
    if parts[1]=="done":
        if chat_id not in active_games: return await cb.answer()
        game=active_games[chat_id]
        # –∫–Ω–æ–ø–∫—É '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' –¥–æ–ª–∂–µ–Ω –∂–∞—Ç—å —Ü–µ–ª—å
        if game.target_player_id != user_id: return await cb.answer("–ù–µ —Ç—ã —Ü–µ–ª—å")
        if game.phase!="task_active": return await cb.answer()
        # –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ next
        game.current_index = game.players.index(user_id)
        game.phase = "waiting_action"
        game.current_task=None; game.current_task_type=None; game.target_player_id=None
        await cb.message.edit_text(f"‚úÖ {mention_name(user_id, game.player_names[user_id])} –≤—ã–ø–æ–ª–Ω–∏–ª(–∞) –∑–∞–¥–∞–Ω–∏–µ! –•–æ–¥: {mention_name(game.current_player_id(), game.current_player_name())}", parse_mode="HTML", reply_markup=action_keyboard(game).as_markup())
        return await cb.answer("–ì–æ—Ç–æ–≤–æ")
    await cb.answer()

@router.message()
async def private_task_input(message: Message, bot: Bot):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –≤–≤–æ–¥ –∑–∞–¥–∞–Ω–∏—è
    if message.chat.type != 'private':
        return
    uid = message.from_user.id
    if uid not in waiting_for_input:
        return
    info = waiting_for_input.pop(uid)
    chat_id = info['chat_id']
    if chat_id not in active_games:
        return
    game = active_games[chat_id]
    # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –µ–≥–æ —Ö–æ–¥ –∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç
    if game.current_player_id() != uid or game.phase != 'awaiting_content':
        return
    target = info['target']
    game.target_player_id = target
    game.current_task_type = info['type']
    game.current_task = message.text.strip()
    game.phase = 'task_active'
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏ –≤ –õ–°
    try:
        await bot.send_message(target,
            f"ü§´ –í–∞–º –ø—Ä–∏—à–ª–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ <b>{'–ü—Ä–∞–≤–¥–∞' if game.current_task_type=='truth' else '–î–µ–π—Å—Ç–≤–∏–µ'}</b>:\n\n{game.current_task}\n\n–ö–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —á–∞—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.",
            parse_mode='HTML')
    except Exception:
        await bot.send_message(chat_id,
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–° {mention_name(target, game.player_names[target])}. –û–Ω/–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω(–∞) –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start –≤ –õ–°.",
            parse_mode='HTML')
    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    await bot.send_message(chat_id,
        f"üì® {mention_name(target, game.player_names[target])} –ø–æ–ª—É—á–∏–ª(–∞) —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!",
        parse_mode='HTML')
    await bot.send_message(chat_id,
        f"‚è≥ –ñ–¥—ë–º {mention_name(target, game.player_names[target])}‚Ä¶",
        parse_mode='HTML', reply_markup=waiting_task_keyboard().as_markup())
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä—É
    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ü–µ–ª–∏. –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

@router.message(Command(commands=["end_tod","stop_tod"]))
async def cmd_end(message: Message):
    chat_id=message.chat.id; user_id=message.from_user.id
    if chat_id in active_games:
        game=active_games[chat_id]
        if user_id!=game.creator_id: return await message.answer("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
        del active_games[chat_id]; return await message.answer("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    if chat_id in lobbies:
        lobby=lobbies[chat_id]
        if user_id!=lobby['creator']: return await message.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–æ–±–±–∏")
        del lobbies[chat_id]; return await message.answer("–õ–æ–±–±–∏ –∑–∞–∫—Ä—ã—Ç–æ.")
    await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –ª–æ–±–±–∏.")

@router.message(Command(commands=["tod_help"]))
async def cmd_tod_help(message: Message):
    await message.answer(
        "<b>–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ (—Ä–µ–º–∞—Å—Ç–µ—Ä)</b>\n\n"
        "/truthordare ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏\n"
        "–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏: —Ä–µ–∂–∏–º (–ø–æ –∫—Ä—É–≥—É / –∫–æ–º—É —É–≥–æ–¥–Ω–æ), –ø—Ä–∞–≤–∏–ª–∞ (1 –ø–∞—Å / –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ).\n"
        "/end_tod ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å (—Å–æ–∑–¥–∞—Ç–µ–ª—å)\n"
        "/tod_help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–•–æ–¥: –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚Äî (–≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å ‚Äî –î–∞–ª–µ–µ.",
        parse_mode="HTML")
