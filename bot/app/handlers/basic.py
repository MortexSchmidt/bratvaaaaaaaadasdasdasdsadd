from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command

router = Router(name="basic")

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("—Å–∞–ª–∞–º –ø–æ–ø–æ–ª–∞–º —è —Ö—É–µ–≥–ª–æ—Ç–∫–∞")

HELP_SECTIONS = {
    "main": {
        "title": "üìö <b>–ü–æ–º–æ—â—å ‚Äî –û–±–∑–æ—Ä</b>",
        "text": (
            "<b>‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É.\n\n"
            "<b>‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ <b>/profile</b> ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ <b>/–¥—Ä–æ—á–∫–∞</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–∫–∞ (+—Å—Ç—Ä–∏–∫, XP, –º–æ–Ω–µ—Ç—ã)\n"
            "‚Ä¢ <b>/truth</b> / <b>/tod</b> ‚Äî –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ <b>/–ª–∏–¥–µ—Ä—ã</b> / <b>/–∞—á–∏–≤–∫–∏</b> ‚Äî —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ <b>/set_status</b> ‚Äî —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n"
            "‚Ä¢ <b>/daily</b> ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–≤–µ—Å—Ç\n"
            "‚Ä¢ <b>/week</b> ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏\n\n"
            "<b>üóÇ –†–∞–∑–¥–µ–ª—ã —Å–Ω–∏–∑—É:</b> –ü—Ä–æ—Ñ–∏–ª—å ‚Ä¢ –î—Ä–æ—á–∫–∞ ‚Ä¢ –ü/–î ‚Ä¢ –ò–≥—Ä—ã ‚Ä¢ –ú–∞—Ñ–∏—è ‚Ä¢ –ê–¥–º–∏–Ω" )
    },
    "profile": {
        "title": "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å / –≠–∫–æ–Ω–æ–º–∏–∫–∞</b>",
        "text": (
            "<b>/profile</b> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: <i>–£—Ä–æ–≤–µ–Ω—å ‚Ä¢ XP ‚Ä¢ –ú–æ–Ω–µ—Ç—ã ‚Ä¢ –¢–µ–∫—É—â–∏–π/–ú–∞–∫—Å —Å—Ç—Ä–∏–∫ ‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π ‚Ä¢ –ü–∏—Ç–æ–º–µ—Ü ‚Ä¢ ELO ‚Ä¢ –°—Ç–∞—Ç—É—Å</i>.\n"
            "<b>üî¢ –£—Ä–æ–≤–µ–Ω—å:</b> sqrt(xp/10) (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞).\n"
            "<b>üß¨ XP:</b> +1 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, +3 –Ω–∞ –∫–∞–∂–¥–æ–º –∫—Ä–∞—Ç–Ω–æ–º 10 —Å—Ç—Ä–∏–∫–µ (+2 –±–æ–Ω—É—Å).\n"
            "<b>üí∞ –ú–æ–Ω–µ—Ç—ã:</b> –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π —Å–µ—Ä–∏–∏ ‚Äî –º–Ω–æ–∂–∏—Ç–µ–ª—å: 7‚Üí1, 14‚Üí2, 21‚Üí3 ...\n"
            "<b>üìù /set_status</b> ‚Äî —Å—Ç–∞—Ç—É—Å (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "<b>üêæ /–ø–∏—Ç–æ–º–µ—Ü –ò–º—è</b> ‚Äî –∏–º—è —Ç–≤–æ–µ–≥–æ '–î—Ä–æ—á–∏–∫–∞'.\n"
            "<b>‚ôª Recovery:</b> –µ—Å–ª–∏ —Å–µ—Ä–∏—è ‚â•10 —Å–ª–æ–º–∞–ª–∞—Å—å ‚Äî /recover (–ø–æ–ª–æ–≤–∏–Ω–∞ —Å—Ç–∞—Ä–æ–π —Å–µ—Ä–∏–∏) –≤ —Ç–µ—á–µ–Ω–∏–µ 48—á." )
    },
    "drochka": {
        "title": "üî• <b>–ï–∂–µ–¥–Ω–µ–≤–∫–∞ (–î—Ä–æ—á–∫–∞)</b>",
        "text": (
            "<b>/–¥—Ä–æ—á–∫–∞</b> –∏–ª–∏ —Å–ª–æ–≤–æ '–¥—Ä–æ—á' ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (—Ç–∞–π–º–∑–æ–Ω–∞).\n"
            "<b>‚è≥ –û–∫–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞:</b> >34—á = —Å–µ—Ä–∏—è –ª–æ–º–∞–µ—Ç—Å—è.\n"
            "<b>üèÖ –ê—á–∏–≤–∫–∏ —Å–µ—Ä–∏–∏:</b> 5 / 10 / 30 / 50 / 100 / 365.\n"
            "<b>üíØ –ê—á–∏–≤–∫–∏ —Ç–æ—Ç–∞–ª–∞:</b> 1000 / 5000.\n"
            "<b>üéØ Daily:</b> —Å–¥–µ–ª–∞–π –µ–∂–µ–¥–Ω–µ–≤–∫—É ‚Üí +2 XP +1 –º–æ–Ω–µ—Ç–∞.\n"
            "<b>üåê Weekly:</b> –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–¥–µ–ª–∏ /week.\n"
            "<b>üí° –°–æ–≤–µ—Ç:</b> –Ω–µ –∫–æ–ø–∏ recovery ‚Äî –æ–Ω —Å–≥–æ—Ä–∞–µ—Ç." )
    },
    "tod": {
        "title": "üé≠ <b>–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ</b>",
        "text": (
            "<b>/truth</b> / <b>/tod</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏.\n"
            "<b>‚öô –†–µ–∂–∏–º—ã:</b> –ü–æ –∫—Ä—É–≥—É ‚è± / –ö–æ–º—É —É–≥–æ–¥–Ω–æ üéØ.\n"
            "<b>üìè –ü—Ä–∞–≤–∏–ª–∞:</b> 1 –ø–∞—Å –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ.\n"
            "<b>üïµ –¶–µ–ª—å</b> –≤ —Ä–µ–∂–∏–º–µ –ø–æ –∫—Ä—É–≥—É —Å–∞–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø.\n"
            "<b>ü§´ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:</b> —Å–ø—Ä–∞—à–∏–≤–∞—é—â–∏–π –ø–∏—à–µ—Ç –≤ –õ–° ‚Üí —Ü–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤ –õ–° ‚Üí –∂–º—ë—Ç '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.\n"
            "<b>üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å:</b> –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /end_tod.\n"
            "<b>üé≤ Random:</b> —Å–ª—É—á–∞–π–Ω–æ –ü—Ä–∞–≤–¥–∞/–î–µ–π—Å—Ç–≤–∏–µ." )
    },
    "games": {
        "title": "üéÆ <b>–ò–≥—Ä—ã</b>",
        "text": (
            "<b>/tictactoe</b> ‚Äî –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ c ELO (–Ω–∞—á–∞–ª–æ 1000).\n"
            "<b>ELO:</b> –ø–æ–±–µ–¥–∞/–Ω–∏—á—å—è/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –ø–µ—Ä–µ—Å—á—ë—Ç.\n"
            "–ü–ª–∞–Ω: –±–æ–ª—å—à–µ –º–∏–Ω–∏-–∏–≥—Ä, –±—É—Å—Ç–µ—Ä—ã XP, —Ä–µ–π—Ç–∏–Ω–≥–∏ —Å–µ–∑–æ–Ω–Ω–æ." )
    },
    "mafia": {
        "title": "üïµÔ∏è <b>–ú–∞—Ñ–∏—è (–ë–∞–∑–æ–≤–æ)</b>",
        "text": (
            "<b>/mafia_start</b> ‚Äî —Å–æ–∑–¥–∞—Ç—å\n<b>/join_mafia</b> ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å\n<b>/start_game_mafia</b> ‚Äî —Å—Ç–∞—Ä—Ç\n"
            "<b>/vote</b> @user ‚Äî –≥–æ–ª–æ—Å –¥–Ω—ë–º\n<b>/kill_mafia</b> @user ‚Äî –º–∞—Ñ–∏—è –Ω–æ—á—å—é\n<b>/heal_mafia</b> @user ‚Äî –¥–æ–∫—Ç–æ—Ä\n<b>/check_mafia</b> @user ‚Äî –¥–µ—Ç–µ–∫—Ç–∏–≤\n"
            "–†–æ–ª–∏/–±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å. –°–≤—è–∑–∫–∞ —Å XP –ø–æ–∑–∂–µ." )
    },
    "admin": {
        "title": "üõ† <b>–ê–¥–º–∏–Ω / –¢–µ—Ö</b>",
        "text": (
            "<b>/refresh_commands</b> ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é.\n"
            "<b>/broadcast</b> &lt;—Ç–µ–∫—Å—Ç&gt; ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º.\n"
            "<b>ENV:</b> BOT_TOKEN ‚Ä¢ TIMEZONE ‚Ä¢ DB_DIR.\n"
            "<b>DB:</b> user_stats / user_achievements / daily_quests / weekly_progress.\n"
            "–ü–ª–∞–Ω—ã: –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥ –≤—Ä—É—á–Ω—É—é, –ª–æ–≥ —Å–æ–±—ã—Ç–∏–π." )
    },
}

def build_help_keyboard(active_key: str) -> InlineKeyboardMarkup:
    buttons = []
    row1 = [
        InlineKeyboardButton(text=("üìö" if active_key=="main" else "–ú–µ–Ω—é"), callback_data="help:sec:main"),
        InlineKeyboardButton(text=("üë§" if active_key=="profile" else "–ü—Ä–æ—Ñ–∏–ª—å"), callback_data="help:sec:profile"),
        InlineKeyboardButton(text=("üî•" if active_key=="drochka" else "–î—Ä–æ—á–∫–∞"), callback_data="help:sec:drochka"),
    ]
    row2 = [
        InlineKeyboardButton(text=("üé≠" if active_key=="tod" else "–ü/–î"), callback_data="help:sec:tod"),
        InlineKeyboardButton(text=("üéÆ" if active_key=="games" else "–ò–≥—Ä—ã"), callback_data="help:sec:games"),
        InlineKeyboardButton(text=("üïµÔ∏è" if active_key=="mafia" else "–ú–∞—Ñ–∏—è"), callback_data="help:sec:mafia"),
    ]
    row3 = [
        InlineKeyboardButton(text=("üõ†" if active_key=="admin" else "–ê–¥–º–∏–Ω"), callback_data="help:sec:admin"),
        InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="help:close"),
    ]
    buttons.extend([row1,row2,row3])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def render_help_section(key: str) -> str:
    sec = HELP_SECTIONS.get(key, HELP_SECTIONS['main'])
    return f"{sec['title']}\n\n{sec['text']}"

@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    text = render_help_section('main')
    await message.answer(text, parse_mode="HTML", reply_markup=build_help_keyboard('main'))

@router.callback_query(F.data.startswith("help:"))
async def help_callbacks(cb: CallbackQuery):
    if not cb.data:
        return await cb.answer()
    parts = cb.data.split(":")
    if len(parts) < 2:
        return await cb.answer()
    action = parts[1]
    if action == 'close':
        try:
            await cb.message.edit_text("–ó–∞–∫—Ä—ã—Ç–æ.")
        except Exception:
            pass
        return await cb.answer("–ó–∞–∫—Ä—ã—Ç–æ")
    if action == 'sec':
        if len(parts) < 3:
            return await cb.answer()
        key = parts[2]
        text = render_help_section(key)
        try:
            await cb.message.edit_text(text, parse_mode="HTML", reply_markup=build_help_keyboard(key))
        except Exception:
            # fallback –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await cb.message.answer(text, parse_mode="HTML", reply_markup=build_help_keyboard(key))
        return await cb.answer()
    await cb.answer()

@router.message(Command(commands=["ping"]))
async def cmd_ping(message: Message):
    await message.answer("pong")

@router.message(Command(commands=["whoami", "id"]))
async def cmd_whoami(message: Message):
    user = message.from_user
    chat = message.chat
    await message.answer(
        f"<b>User ID:</b> <code>{user.id}</code>\n" \
        f"<b>Chat ID:</b> <code>{chat.id}</code>\n" \
        f"–¢–∏–ø —á–∞—Ç–∞: {chat.type}\n" \
        "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ—Ç–∫–ª—é—á–∏ privacy —É BotFather."
    )

@router.message(Command(commands=["echo"]))
async def cmd_echo(message: Message):
    # —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.answer("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç: /echo <—Ç–µ–∫—Å—Ç>")
    else:
        await message.answer(text[1])

@router.message(F.text.contains("–±–æ—Ç"))
async def mention_react(message: Message):
    if message.from_user and not message.from_user.is_bot:
        try:
            # Get all chat members and mention them
            if message.chat.type in {"group", "supergroup"}:
                members = []
                async for member in message.bot.get_chat_members(message.chat.id):
                    members.append(member.user.id)
                mentions = " ".join([f"<a href='tg://user?id={user_id}'>‚Äå</a>" for user_id in members])
                await message.reply(f"—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π{mentions}", parse_mode="HTML")
            else:
                await message.reply("—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π")
        except Exception:
            # Fallback to @all
            await message.reply("—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π @all")
