from __future__ import annotations
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command

router = Router(name="basic")

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("—Å–∞–ª–∞–º –ø–æ–ø–æ–ª–∞–º —è —Ö—É–µ–≥–ª–æ—Ç–∫–∞")

HELP_SECTIONS = {
    "main": {
        "title": "üìö –ü–æ–º–æ—â—å ‚Äî –û–±–∑–æ—Ä",
        "text": (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –≠—Ç–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞.\n\n"
            "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª—ã –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /profile ‚Äî –ø—Ä–æ—Ñ–∏–ª—å\n"
            "‚Ä¢ /–¥—Ä–æ—á–∫–∞ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ /truth ‚Äî –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ\n"
            "‚Ä¢ /tictactoe ‚Äî –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)\n"
            "‚Ä¢ /–ª–∏–¥–µ—Ä—ã /–∞—á–∏–≤–∫–∏ ‚Äî —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ /set_status ‚Äî —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n"
            "–†–∞–∑–¥–µ–ª—ã: –ü—Ä–æ—Ñ–∏–ª—å, –î—Ä–æ—á–∫–∞, –ü/–î, –ò–≥—Ä—ã, –ú–∞—Ñ–∏—è, –ê–¥–º–∏–Ω." )
    },
    "profile": {
        "title": "üë§ –ü—Ä–æ—Ñ–∏–ª—å / –≠–∫–æ–Ω–æ–º–∏–∫–∞",
        "text": (
            "<b>/profile</b> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: —É—Ä–æ–≤–µ–Ω—å, XP, –º–æ–Ω–µ—Ç—ã, —Å–µ—Ä–∏—é, –≤—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π, –ø–∏—Ç–æ–º—Ü–∞, ELO (–ø–æ–∑–∂–µ), —Å—Ç–∞—Ç—É—Å.\n"
            "<b>–£—Ä–æ–≤–µ–Ω—å</b>: —Ñ–æ—Ä–º—É–ª–∞ —Ç–µ—Å—Ç–æ–≤–∞—è sqrt(xp/10).\n"
            "<b>XP</b>: —Ä–∞—Å—Ç—ë—Ç –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1) –∏ –±–æ–Ω—É—Å (+2 –ø–æ–≤–µ—Ä—Ö) –∫–∞–∂–¥—ã–µ 10 —Å—Ç—Ä–∏–∫–∞.\n"
            "<b>–ú–æ–Ω–µ—Ç—ã</b>: +1 –Ω–∞ –∫–∞–∂–¥–æ–º –¥–Ω–µ —Å–µ—Ä–∏–∏ –∫—Ä–∞—Ç–Ω–æ–º 7.\n"
            "<b>/set_status</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "<b>/–ø–∏—Ç–æ–º–µ—Ü –ò–º—è</b> ‚Äî –∑–∞–¥–∞—Ç—å –∏–º—è –ø–∏—Ç–æ–º—Ü—É (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è)." )
    },
    "drochka": {
        "title": "üî• –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–¥—Ä–æ—á–∫–∞)",
        "text": (
            "<b>/–¥—Ä–æ—á–∫–∞</b> –∏–ª–∏ —Å–ª–æ–≤–æ–º '–¥—Ä–æ—á' ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. 1 —Ä–∞–∑ –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ (—Ç–∞–π–º–∑–æ–Ω–∞ Europe/Kyiv).\n"
            "<b>–°–µ—Ä–∏—è (streak)</b> ‚Äî —Ä–∞—Å—Ç—ë—Ç –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–∞. >34—á –ø–µ—Ä–µ—Ä—ã–≤ ‚Äî —Å–ª–æ–º —Å–µ—Ä–∏–∏.\n"
            "<b>–ù–∞–≥—Ä–∞–¥—ã</b>: XP +1 (–æ–±—ã—á–Ω–æ) / +3 (–∫–∞–∂–¥—ã–π 10-–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏). –ú–æ–Ω–µ—Ç–∞: –∫–∞–∂–¥—ã–π 7-–π –¥–µ–Ω—å —Å–µ—Ä–∏–∏.\n"
            "–ê—á–∏–≤–∫–∏ —Å–µ–π—á–∞—Å: —Å–µ—Ä–∏–∏ 5 / 10 / 30. –°–∫–æ—Ä–æ —Ä–∞—Å—à–∏—Ä–∏–º (50/100/365 –∏ total 1000/5000).\n"
            "–ö–æ–º–±–æ –∏ –∫–≤–µ—Å—Ç—ã ‚Äî –≤ –ø–ª–∞–Ω–∞—Ö." )
    },
    "tod": {
        "title": "üé≠ –ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –î–µ–π—Å—Ç–≤–∏–µ",
        "text": (
            "<b>/truth</b> (/tod) ‚Äî —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ –≤ –≥—Ä—É–ø–ø–µ.\n"
            "–†–µ–∂–∏–º—ã: –ü–æ –∫—Ä—É–≥—É / –ö–æ–º—É —É–≥–æ–¥–Ω–æ.\n"
            "–ü—Ä–∞–≤–∏–ª–∞: —Å 1 –ø–∞—Å–æ–º –∏–ª–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ.\n"
            "–í —Ä–µ–∂–∏–º–µ '–ü–æ –∫—Ä—É–≥—É' —Ü–µ–ª—å —Å–∞–º–∞ –≤—ã–±–∏—Ä–∞–µ—Ç (–ü—Ä–∞–≤–¥–∞ / –î–µ–π—Å—Ç–≤–∏–µ / Random / –ü–∞—Å).\n"
            "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: —Å–ø—Ä–∞—à–∏–≤–∞—é—â–µ–º—É –≤ –õ–° ‚Äî –ø–∏—à–µ—Ç, —Ü–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤ –õ–° –∏ –∂–º—ë—Ç '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'.\n"
            "–ö–Ω–æ–ø–∫–∞ '–ó–∞–≤–µ—Ä—à–∏—Ç—å' —É —Å–æ–∑–¥–∞—Ç–µ–ª—è. /end_tod ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å." )
    },
    "games": {
        "title": "üéÆ –ò–≥—Ä—ã (–ø—Ä–æ—á–µ–µ)",
        "text": (
            "<b>/tictactoe</b> ‚Äî –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –±–æ—Ç–µ). –ë—É–¥–µ—Ç ELO, –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü–ª–∞–Ω: —Ä–µ–π—Ç–∏–Ω–≥–∏, —Å–µ–∑–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –±—É—Å—Ç–µ—Ä—ã XP.\n"
            "–ú–∏–Ω–∏-–∏–≥—Ä—ã –º–æ–≥—É—Ç –¥–∞–≤–∞—Ç—å XP/–º–æ–Ω–µ—Ç—ã (–ø–æ–∑–∂–µ)." )
    },
    "mafia": {
        "title": "üïµÔ∏è –ú–∞—Ñ–∏—è (–æ—Å–Ω–æ–≤—ã)",
        "text": (
            "–ö–æ–º–∞–Ω–¥—ã (–≤ –≥—Ä—É–ø–ø–µ):\n"
            "/mafia_start ‚Äî —Å–æ–∑–¥–∞—Ç—å\n/join_mafia ‚Äî –≤—Å—Ç—É–ø–∏—Ç—å\n/start_game_mafia ‚Äî —Å—Ç–∞—Ä—Ç (—Å–æ–∑–¥–∞—Ç–µ–ª—å)\n"
            "/vote @user ‚Äî –¥–Ω–µ–≤–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n/kill_mafia @user ‚Äî –Ω–æ—á—å—é (–º–∞—Ñ–∏—è)\n/heal_mafia @user ‚Äî –¥–æ–∫—Ç–æ—Ä\n/check_mafia @user ‚Äî –¥–µ—Ç–µ–∫—Ç–∏–≤.\n"
            "–†–æ–ª–∏ –∏ –ª–æ–≥–∏–∫–∞ –º–æ–≥—É—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è. XP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ‚Äî –≤ –ø–ª–∞–Ω–∞—Ö." )
    },
    "admin": {
        "title": "üõ† –ê–¥–º–∏–Ω / –¢–µ—Ö",
        "text": (
            "<b>/refresh_commands</b> ‚Äî –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∫–µ—à —É –∫–ª–∏–µ–Ω—Ç–∞).\n"
            "<b>/broadcast</b> <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∞–º (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤—Å–µ—Ö).\n"
            "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, TIMEZONE, DB_DIR.\n"
            "–ë–î: SQLite (user_stats, user_achievements).\n"
            "–ü–ª–∞–Ω—ã: –∂—É—Ä–Ω–∞–ª—ã —Å–æ–±—ã—Ç–∏–π, —Ä—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥." )
    },
}

def build_help_keyboard(active_key: str) -> InlineKeyboardMarkup:
    buttons = []
    row1 = [
        InlineKeyboardButton(text=("üìö" if active_key=="main" else "–ú–µ–Ω—é"), callback_data="help:sec:main"),
        InlineKeyboardButton(text=("üë§" if active_key=="profile" else "–ü—Ä–æ—Ñ–∏–ª—å"), callback_data="help:sec:profile"),
        InlineKeyboardButton(text=("üî•" if active_key=="drochka" else "–î—Ä–æ—á–∫–∞"), callback_data="help:sec:drochka"),
    ]
    row2 = [
        InlineKeyboardButton(text=("üé≠" if active_key=="tod" else "–ü/–î"), callback_data="help:sec:tod"),
        InlineKeyboardButton(text=("üéÆ" if active_key=="games" else "–ò–≥—Ä—ã"), callback_data="help:sec:games"),
        InlineKeyboardButton(text=("üïµÔ∏è" if active_key=="mafia" else "–ú–∞—Ñ–∏—è"), callback_data="help:sec:mafia"),
    ]
    row3 = [
        InlineKeyboardButton(text=("üõ†" if active_key=="admin" else "–ê–¥–º–∏–Ω"), callback_data="help:sec:admin"),
        InlineKeyboardButton(text="‚úñ –ó–∞–∫—Ä—ã—Ç—å", callback_data="help:close"),
    ]
    buttons.extend([row1,row2,row3])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def render_help_section(key: str) -> str:
    sec = HELP_SECTIONS.get(key, HELP_SECTIONS['main'])
    return f"{sec['title']}\n\n{sec['text']}"

@router.message(Command(commands=["help"]))
async def cmd_help(message: Message):
    text = render_help_section('main')
    await message.answer(text, parse_mode="HTML", reply_markup=build_help_keyboard('main'))

@router.callback_query(F.data.startswith("help:"))
async def help_callbacks(cb: CallbackQuery):
    if not cb.data:
        return await cb.answer()
    parts = cb.data.split(":")
    if len(parts) < 2:
        return await cb.answer()
    action = parts[1]
    if action == 'close':
        try:
            await cb.message.edit_text("–ó–∞–∫—Ä—ã—Ç–æ.")
        except Exception:
            pass
        return await cb.answer("–ó–∞–∫—Ä—ã—Ç–æ")
    if action == 'sec':
        if len(parts) < 3:
            return await cb.answer()
        key = parts[2]
        text = render_help_section(key)
        try:
            await cb.message.edit_text(text, parse_mode="HTML", reply_markup=build_help_keyboard(key))
        except Exception:
            # fallback –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await cb.message.answer(text, parse_mode="HTML", reply_markup=build_help_keyboard(key))
        return await cb.answer()
    await cb.answer()

@router.message(Command(commands=["ping"]))
async def cmd_ping(message: Message):
    await message.answer("pong")

@router.message(Command(commands=["whoami", "id"]))
async def cmd_whoami(message: Message):
    user = message.from_user
    chat = message.chat
    await message.answer(
        f"<b>User ID:</b> <code>{user.id}</code>\n" \
        f"<b>Chat ID:</b> <code>{chat.id}</code>\n" \
        f"–¢–∏–ø —á–∞—Ç–∞: {chat.type}\n" \
        "–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ‚Äî –æ—Ç–∫–ª—é—á–∏ privacy —É BotFather."
    )

@router.message(Command(commands=["echo"]))
async def cmd_echo(message: Message):
    # —É–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.answer("–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–∫—Å—Ç: /echo <—Ç–µ–∫—Å—Ç>")
    else:
        await message.answer(text[1])

@router.message(F.text.contains("–±–æ—Ç"))
async def mention_react(message: Message):
    if message.from_user and not message.from_user.is_bot:
        try:
            # Get all chat members and mention them
            if message.chat.type in {"group", "supergroup"}:
                members = []
                async for member in message.bot.get_chat_members(message.chat.id):
                    members.append(member.user.id)
                mentions = " ".join([f"<a href='tg://user?id={user_id}'>‚Äå</a>" for user_id in members])
                await message.reply(f"—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π{mentions}", parse_mode="HTML")
            else:
                await message.reply("—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π")
        except Exception:
            # Fallback to @all
            await message.reply("—Å—É–∫–∞ –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ —Å—é–¥–∞ –Ω–∞—Ö—É–π @all")
