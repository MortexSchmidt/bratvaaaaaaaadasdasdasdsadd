from __future__ import annotations
import asyncio
from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.filters import Command
import random
from typing import Dict, List, Optional
from dataclasses import dataclass
from enum import Enum
from .. import format_user_mention, format_user_mention_from_id

router = Router(name="mafia")

class GamePhase(Enum):
    WAITING = "–æ–∂–∏–¥–∞–Ω–∏–µ"
    NIGHT = "–Ω–æ—á—å"
    DAY = "–¥–µ–Ω—å"
    VOTING = "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
    ENDED = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"

class Role(Enum):
    MAFIA = "–º–∞—Ñ–∏—è"
    CIVILIAN = "–º–∏—Ä–Ω—ã–π"
    DETECTIVE = "–¥–µ—Ç–µ–∫—Ç–∏–≤"
    DOCTOR = "–¥–æ–∫—Ç–æ—Ä"

@dataclass
class Player:
    user_id: int
    username: str
    role: Optional[Role] = None
    alive: bool = True
    vote_count: int = 0  # for voting

@dataclass
class MafiaGame:
    chat_id: int
    players: List[Player]
    phase: GamePhase = GamePhase.WAITING
    night_actions: Dict[str, Optional[int]] = None  # mafia_kill, doctor_heal, detective_check
    day_votes: Dict[int, int] = None  # voter_id -> target_id
    night_timer: Optional[asyncio.Task] = None
    day_timer: Optional[asyncio.Task] = None

    def __post_init__(self):
        if self.night_actions is None:
            self.night_actions = {"mafia_kill": None, "doctor_heal": None, "detective_check": None}
        if self.day_votes is None:
            self.day_votes = {}

    def get_alive_players(self) -> List[Player]:
        return [p for p in self.players if p.alive]

    def get_mafia_players(self) -> List[Player]:
        return [p for p in self.get_alive_players() if p.role == Role.MAFIA]

    def get_civilian_players(self) -> List[Player]:
        return [p for p in self.get_alive_players() if p.role != Role.MAFIA]

    def check_win_condition(self) -> Optional[str]:
        alive = self.get_alive_players()
        mafia_count = len([p for p in alive if p.role == Role.MAFIA])
        civilian_count = len(alive) - mafia_count

        if mafia_count == 0:
            return "–ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!"
        elif mafia_count >= civilian_count:
            return "–ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!"
        return None

games: Dict[int, MafiaGame] = {}

async def start_night_phase(bot: Bot, game: MafiaGame):
    game.phase = GamePhase.NIGHT
    game.night_actions = {"mafia_kill": None, "doctor_heal": None, "detective_check": None}

    alive = game.get_alive_players()
    mafia_list = "\n".join([format_user_mention_from_id(p.user_id, p.username) for p in game.get_mafia_players()])

    # Send night instructions
    for player in alive:
        if player.role == Role.MAFIA:
            await bot.send_message(player.user_id, f"üåÉ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞!\n\n–í—ã –º–∞—Ñ–∏—è. –í–∞—à–∏ —Å–æ—é–∑–Ω–∏–∫–∏:\n{mafia_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É: /kill_mafia @username")
        elif player.role == Role.DOCTOR:
            await bot.send_message(player.user_id, "üåÉ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞!\n\n–í—ã –¥–æ–∫—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ª–µ—á–∏—Ç—å: /heal_mafia @username")
        elif player.role == Role.DETECTIVE:
            await bot.send_message(player.user_id, "üåÉ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞!\n\n–í—ã –¥–µ—Ç–µ–∫—Ç–∏–≤. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: /check_mafia @username")
        else:
            await bot.send_message(player.user_id, "üåÉ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∏–ª–∞! –°–ø–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ...")

    await bot.send_message(game.chat_id, "üåÉ –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å! –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤ –õ–° –±–æ—Ç–∞.")

    # Start night timer (60 seconds)
    game.night_timer = asyncio.create_task(night_timeout(bot, game))

async def night_timeout(bot: Bot, game: MafiaGame):
    await asyncio.sleep(60)  # 1 minute
    await process_night_results(bot, game)

async def process_night_results(bot: Bot, game: MafiaGame):
    if game.night_timer:
        game.night_timer.cancel()

    actions = game.night_actions
    alive = game.get_alive_players()
    killed = actions.get("mafia_kill")
    healed = actions.get("doctor_heal")
    checked = actions.get("detective_check")

    result_msg = "üåÖ –ù–æ—á—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n\n"

    # Detective result
    if checked is not None:
        checked_player = next((p for p in alive if p.user_id == checked), None)
        if checked_player:
            is_mafia = checked_player.role == Role.MAFIA
            detective = next((p for p in alive if p.role == Role.DETECTIVE), None)
            if detective:
                await bot.send_message(detective.user_id, f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {checked_player.username} {'–º–∞—Ñ–∏—è' if is_mafia else '–Ω–µ –º–∞—Ñ–∏—è'}")

    # Killing logic
    if killed is not None and killed != healed:
        killed_player = next((p for p in alive if p.user_id == killed), None)
        if killed_player:
            killed_player.alive = False
            result_msg += f"üíÄ –£–±–∏—Ç: {format_user_mention_from_id(killed_player.user_id, killed_player.username)}\n"
        elif healed:
            healed_player = next((p for p in alive if p.user_id == healed), None)
            if healed_player:
                result_msg += f"‚öïÔ∏è –î–æ–∫—Ç–æ—Ä –≤—ã–ª–µ—á–∏–ª: {format_user_mention_from_id(healed_player.user_id, healed_player.username)}\n"

    # Check win condition
    win_msg = game.check_win_condition()
    if win_msg:
        result_msg += f"\n{win_msg}"
        game.phase = GamePhase.ENDED
    else:
        result_msg += "\nüèôÔ∏è –ù–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–Ω—å!"
        await start_day_phase(bot, game)

    await bot.send_message(game.chat_id, result_msg)

async def start_day_phase(bot: Bot, game: MafiaGame):
    game.phase = GamePhase.DAY
    game.day_votes = {}

    alive_list = "\n".join([f"{i+1}. {format_user_mention_from_id(p.user_id, p.username)}" for i, p in enumerate(game.get_alive_players())])

    await bot.send_message(game.chat_id, f"üèôÔ∏è –î–µ–Ω—å –Ω–∞—Å—Ç—É–ø–∏–ª!\n\n–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:\n{alive_list}\n\n–û–±—Å—É–∂–¥–∞–π—Ç–µ! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.")

    # Start day timer (2 minutes)
    game.day_timer = asyncio.create_task(day_timeout(bot, game))

async def day_timeout(bot: Bot, game: MafiaGame):
    await asyncio.sleep(120)  # 2 minutes
    await start_voting_phase(bot, game)

async def start_voting_phase(bot: Bot, game: MafiaGame):
    game.phase = GamePhase.VOTING

    alive = game.get_alive_players()
    if len(alive) <= 1:
        return

    await bot.send_message(game.chat_id, "üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞–∑–Ω—å!\n\n–ì–æ–ª–æ—Å—É–π—Ç–µ: /vote @username\n\n–£ –≤–∞—Å 1 –º–∏–Ω—É—Ç–∞!")

    await asyncio.sleep(60)  # 1 minute voting
    await process_voting_results(bot, game)

async def process_voting_results(bot: Bot, game: MafiaGame):
    if game.day_timer:
        game.day_timer.cancel()

    # Count votes
    vote_counts = {}
    for target_id in game.day_votes.values():
        vote_counts[target_id] = vote_counts.get(target_id, 0) + 1

    if not vote_counts:
        await bot.send_message(game.chat_id, "üó≥Ô∏è –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª. –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç...")
        await start_night_phase(bot, game)
        return

    # Find player with most votes
    max_votes = max(vote_counts.values())
    candidates = [pid for pid, votes in vote_counts.items() if votes == max_votes]

    if len(candidates) > 1:
        await bot.send_message(game.chat_id, "üó≥Ô∏è –ù–∏—á—å—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç...")
        await start_night_phase(bot, game)
        return

    executed_id = candidates[0]
    executed_player = next((p for p in game.get_alive_players() if p.user_id == executed_id), None)

    if executed_player:
        executed_player.alive = False
        result_msg = f"‚öîÔ∏è –ö–∞–∑–Ω–µ–Ω: {format_user_mention_from_id(executed_player.user_id, executed_player.username)}\n"
        result_msg += f"–û–Ω –±—ã–ª: {executed_player.role.value}\n\n"

        win_msg = game.check_win_condition()
        if win_msg:
            result_msg += win_msg
            game.phase = GamePhase.ENDED
        else:
            result_msg += "üåÉ –ù–æ—á—å –Ω–∞—Å—Ç—É–ø–∞–µ—Ç..."
            await start_night_phase(bot, game)

        await bot.send_message(game.chat_id, result_msg)

@router.message(Command(commands=["mafia"]))
async def cmd_mafia(message: Message):
    text = (
        "üé≠ <b>–ú–∞—Ñ–∏—è</b>\n\n"
        "–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–æ–ª–∏:\n"
        "‚Ä¢ –ú–∞—Ñ–∏—è - —É–±–∏–≤–∞–µ—Ç –ø–æ –Ω–æ—á–∞–º\n"
        "‚Ä¢ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ - –≥–æ–ª–æ—Å—É—é—Ç –¥–Ω–µ–º\n"
        "‚Ä¢ –î–µ—Ç–µ–∫—Ç–∏–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n"
        "‚Ä¢ –î–æ–∫—Ç–æ—Ä - –ª–µ—á–∏—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mafia_start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–µ."
    )
    await message.answer(text)

@router.message(Command(commands=["mafia_start"]))
async def cmd_mafia_start(message: Message):
    if message.chat.type not in {"group", "supergroup"}:
        return await message.answer("üé≠ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")

    chat_id = message.chat.id
    if chat_id in games:
        return await message.answer("üé≠ –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

    user = message.from_user
    player = Player(user.id, user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    game = MafiaGame(chat_id, [player])
    games[chat_id] = game

    player_mention = format_user_mention_from_id(player.user_id, player.username)
    await message.answer(
        "üé≠ <b>–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n"
        f"–ò–≥—Ä–æ–∫ {player_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n"
        "–î—Ä—É–≥–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /join_mafia\n"
        "–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å /start_game_mafia"
    )

@router.message(Command(commands=["join_mafia"]))
async def cmd_join_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games:
        return await message.answer("üé≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /mafia_start")

    game = games[chat_id]
    user = message.from_user
    if any(p.user_id == user.id for p in game.players):
        return await message.answer("üé≠ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    player = Player(user.id, user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    game.players.append(player)
    player_mention = format_user_mention_from_id(player.user_id, player.username)
    await message.answer(f"üé≠ {player_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

@router.message(Command(commands=["start_game_mafia"]))
async def cmd_start_game_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games:
        return await message.answer("üé≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

    game = games[chat_id]
    if len(game.players) < 4:
        return await message.answer("üé≠ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    roles = [Role.MAFIA] * (len(game.players) // 3) + [Role.CIVILIAN] * (len(game.players) - len(game.players) // 3 - 2) + [Role.DETECTIVE, Role.DOCTOR]
    random.shuffle(roles)

    for i, player in enumerate(game.players):
        player.role = roles[i]

    await message.answer("üé≠ –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")

    # Start night phase
    await start_night_phase(message.bot, game)

@router.message(Command(commands=["kill_mafia"]))
async def cmd_kill_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games or games[chat_id].phase != GamePhase.NIGHT:
        return

    game = games[chat_id]
    user = message.from_user
    player = next((p for p in game.players if p.user_id == user.id), None)

    if not player or not player.alive or player.role != Role.MAFIA:
        return await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    # Parse target
    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /kill_mafia @username")

    target_username = args[1].lstrip('@')
    target = next((p for p in game.get_alive_players() if p.username.lower() == target_username.lower()), None)

    if not target:
        return await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    if target.role == Role.MAFIA:
        return await message.answer("‚ùå –ù–µ–ª—å–∑—è —É–±–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö!")

    game.night_actions["mafia_kill"] = target.user_id
    await message.answer("‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")

@router.message(Command(commands=["heal_mafia"]))
async def cmd_heal_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games or games[chat_id].phase != GamePhase.NIGHT:
        return

    game = games[chat_id]
    user = message.from_user
    player = next((p for p in game.players if p.user_id == user.id), None)

    if not player or not player.alive or player.role != Role.DOCTOR:
        return await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /heal_mafia @username")

    target_username = args[1].lstrip('@')
    target = next((p for p in game.get_alive_players() if p.username.lower() == target_username.lower()), None)

    if not target:
        return await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    game.night_actions["doctor_heal"] = target.user_id
    await message.answer("‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")

@router.message(Command(commands=["check_mafia"]))
async def cmd_check_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games or games[chat_id].phase != GamePhase.NIGHT:
        return

    game = games[chat_id]
    user = message.from_user
    player = next((p for p in game.players if p.user_id == user.id), None)

    if not player or not player.alive or player.role != Role.DETECTIVE:
        return await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /check_mafia @username")

    target_username = args[1].lstrip('@')
    target = next((p for p in game.get_alive_players() if p.username.lower() == target_username.lower()), None)

    if not target:
        return await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    game.night_actions["detective_check"] = target.user_id
    await message.answer("‚úÖ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")

@router.message(Command(commands=["vote"]))
async def cmd_vote(message: Message):
    chat_id = message.chat.id
    if chat_id not in games or games[chat_id].phase != GamePhase.VOTING:
        return

    game = games[chat_id]
    user = message.from_user
    player = next((p for p in game.players if p.user_id == user.id), None)

    if not player or not player.alive:
        return await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!")

    args = message.text.split()
    if len(args) < 2:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /vote @username")

    target_username = args[1].lstrip('@')
    target = next((p for p in game.get_alive_players() if p.username.lower() == target_username.lower()), None)

    if not target:
        return await message.answer("‚ùå –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    game.day_votes[user.id] = target.user_id
    await message.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω!")