from __future__ import annotations
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
import random
from typing import Dict, List, Optional
from dataclasses import dataclass
from enum import Enum
from .. import format_user_mention, format_user_mention_from_id

router = Router(name="mafia")

class GamePhase(Enum):
    WAITING = "–æ–∂–∏–¥–∞–Ω–∏–µ"
    NIGHT = "–Ω–æ—á—å"
    DAY = "–¥–µ–Ω—å"
    VOTING = "–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"

class Role(Enum):
    MAFIA = "–º–∞—Ñ–∏—è"
    CIVILIAN = "–º–∏—Ä–Ω—ã–π"
    DETECTIVE = "–¥–µ—Ç–µ–∫—Ç–∏–≤"
    DOCTOR = "–¥–æ–∫—Ç–æ—Ä"

@dataclass
class Player:
    user_id: int
    username: str
    role: Optional[Role] = None
    alive: bool = True

@dataclass
class MafiaGame:
    chat_id: int
    players: List[Player]
    phase: GamePhase = GamePhase.WAITING
    night_actions: Dict[str, int] = None  # mafia_kill, doctor_heal, detective_check

    def __post_init__(self):
        if self.night_actions is None:
            self.night_actions = {}

games: Dict[int, MafiaGame] = {}

@router.message(Command(commands=["mafia"]))
async def cmd_mafia(message: Message):
    text = (
        "üé≠ <b>–ú–∞—Ñ–∏—è</b>\n\n"
        "–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é - —ç—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞, –≥–¥–µ –∏–≥—Ä–æ–∫–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ —Ä–æ–ª–∏:\n"
        "‚Ä¢ –ú–∞—Ñ–∏—è - —É–±–∏–≤–∞–µ—Ç –ø–æ –Ω–æ—á–∞–º\n"
        "‚Ä¢ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ - –≥–æ–ª–æ—Å—É—é—Ç –¥–Ω–µ–º\n"
        "‚Ä¢ –î–µ—Ç–µ–∫—Ç–∏–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–æ–ª–∏\n"
        "‚Ä¢ –î–æ–∫—Ç–æ—Ä - –ª–µ—á–∏—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mafia_start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –≥—Ä—É–ø–ø–µ."
    )
    await message.answer(text)

@router.message(Command(commands=["mafia_start"]))
async def cmd_mafia_start(message: Message):
    if message.chat.type not in {"group", "supergroup"}:
        return await message.answer("üé≠ –ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")

    chat_id = message.chat.id
    if chat_id in games:
        return await message.answer("üé≠ –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

    user = message.from_user
    player = Player(user.id, user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    game = MafiaGame(chat_id, [player])
    games[chat_id] = game

    player_mention = format_user_mention_from_id(player.user_id, player.username)
    await message.answer(
        "üé≠ <b>–ò–≥—Ä–∞ –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</b>\n\n"
        f"–ò–≥—Ä–æ–∫ {player_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è.\n"
        "–î—Ä—É–≥–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /join_mafia\n"
        "–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å /start_game_mafia"
    )

@router.message(Command(commands=["join_mafia"]))
async def cmd_join_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games:
        return await message.answer("üé≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /mafia_start")

    game = games[chat_id]
    user = message.from_user
    if any(p.user_id == user.id for p in game.players):
        return await message.answer("üé≠ –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")

    player = Player(user.id, user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
    game.players.append(player)
    player_mention = format_user_mention_from_id(player.user_id, player.username)
    await message.answer(f"üé≠ {player_mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –ò–≥—Ä–æ–∫–æ–≤: {len(game.players)}")

@router.message(Command(commands=["start_game_mafia"]))
async def cmd_start_game_mafia(message: Message):
    chat_id = message.chat.id
    if chat_id not in games:
        return await message.answer("üé≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

    game = games[chat_id]
    if len(game.players) < 4:
        return await message.answer("üé≠ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π
    roles = [Role.MAFIA] * (len(game.players) // 3) + [Role.CIVILIAN] * (len(game.players) - len(game.players) // 3 - 2) + [Role.DETECTIVE, Role.DOCTOR]
    random.shuffle(roles)

    for i, player in enumerate(game.players):
        player.role = roles[i]

    game.phase = GamePhase.NIGHT

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–æ–ª–µ–π –≤ –õ–° –∏–≥—Ä–æ–∫–∞–º
    for player in game.players:
        role_desc = {
            Role.MAFIA: "üåÉ –í—ã –º–∞—Ñ–∏—è! –ù–æ—á—å—é —É–±–∏–≤–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /kill_mafia <–Ω–æ–º–µ—Ä>",
            Role.CIVILIAN: "üèòÔ∏è –í—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å! –ì–æ–ª–æ—Å—É–π—Ç–µ –¥–Ω–µ–º.",
            Role.DETECTIVE: "üîç –í—ã –¥–µ—Ç–µ–∫—Ç–∏–≤! –ù–æ—á—å—é –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å –ø–æ–º–æ—â—å—é /check_mafia <–Ω–æ–º–µ—Ä>",
            Role.DOCTOR: "‚öïÔ∏è –í—ã –¥–æ–∫—Ç–æ—Ä! –ù–æ—á—å—é –ª–µ—á–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é /heal_mafia <–Ω–æ–º–µ—Ä>"
        }[player.role]

        try:
            await message.bot.send_message(player.user_id, f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role_desc}")
        except:
            pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°

    await message.answer("üé≠ –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã! –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å. –î–µ–π—Å—Ç–≤—É–π—Ç–µ –≤ –õ–°.")

@router.message(Command(commands=["kill_mafia"]))
async def cmd_kill_mafia(message: Message):
    # –õ–æ–≥–∏–∫–∞ —É–±–∏–π—Å—Ç–≤–∞ –º–∞—Ñ–∏–µ–π
    await message.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ