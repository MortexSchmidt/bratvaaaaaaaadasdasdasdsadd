from __future__ import annotations
from aiogram import Router
from aiogram.types import Message
import re
import random
import logging

router = Router(name="ai")

# Some example responses for when we can't reach a real AI API
EXAMPLE_RESPONSES = [
    "–Ø –ø–æ–¥—É–º–∞—é –Ω–∞–¥ —ç—Ç–∏–º –∏ –¥–∞–º —Ç–µ–±–µ –∑–Ω–∞—Ç—å –ø–æ–∑–∂–µ",
    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–π –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
    "–Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥–ª–∞, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ",
    "–•–º, –Ω–µ–ø–ª–æ—Ö–æ–π –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ —Ç—ã —É–∂–µ –∑–Ω–∞–µ—à—å –æ–± —ç—Ç–æ–º?",
    "–Ø –Ω–µ —ç–∫—Å–ø–µ—Ä—Ç –≤ —ç—Ç–æ–º, –Ω–æ –º–æ–≥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–º–æ—á—å. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
    "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ—Å–º–æ—Ç—Ä—é, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å",
    "–Ø –±—ã —Ö–æ—Ç–µ–ª–∞ –ø–æ–º–æ—á—å, –Ω–æ –º–Ω–µ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
    "–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥—É–º–∞—Ç—å—Å—è. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ?",
    "–ó–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ",
    "–•–æ—Ä–æ—à–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è! –ü–æ–¥–µ–ª–∏—Å—å –º—ã—Å–ª—è–º–∏",
]

# Pattern to detect when someone is talking to Milana
MILANA_PATTERNS = [
    # Direct mentions and questions to Milana
    r"^–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ][,?\s]",
    r"^–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ]$",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*[,?\s]*$",

    # Questions directed at Milana
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ]\??\s*$",
    r"^–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*\?$",

    # Common requests to Milana
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–ø–æ–º–æ–≥–∏.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–¥–æ–º–∞—à–∫[–∞|—É|–æ–π|–µ|–∏].*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–∑–∞–¥–∞–Ω–∏[–µ|—é|—è|–µ–º|–∏|–π].*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*—É—á–µ–±[–∞|—É|–æ–π|–µ|—ã|–Ω–∏–∫–æ–≤|–Ω–∏–∫–∞].*",
    r".*–ø–æ–º–æ–≥–∏.*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–Ω–µ –º–æ–≥—É.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–Ω–µ –∑–Ω–∞—é.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–æ–±—ä—è—Å–Ω–∏.*",
    r".*–æ–±—ä—è—Å–Ω–∏.*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*—á—Ç–æ.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–∫–∞–∫.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–ø–æ—á–µ–º—É.*",
    r".*–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ].*–∑–∞—á–µ–º.*",
]

@router.message(lambda message: message.text and any(re.match(pattern, message.text.lower()) for pattern in MILANA_PATTERNS))
async def ai_milana(message: Message):
    try:
        # Get user info for personalized response
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"
        user_mention = f"<a href='tg://user?id={message.from_user.id}'>{user_name}</a>"

        # Extract the request from the message
        user_text = message.text

        # Try to get a more specific request by removing the mention of Milana
        request_text = user_text
        for pattern in MILANA_PATTERNS:
            match = re.match(pattern, user_text.lower())
            if match:
                # Try to get a cleaner request text
                request_text = re.sub(r"–º–∏–ª–∞–Ω[–∞|—É|–æ–π|–µ]", "", user_text, flags=re.IGNORECASE).strip()
                break

        # For now, we'll use simulated responses since we don't have a real AI API key
        # In a real implementation, you would connect to an AI API like OpenAI here
        response = get_simulated_ai_response(request_text)

        # Add some personality to responses
        personality_responses = [
            f"{user_mention}, {response.lower()}",
            f"{response} {user_mention} üòâ",
            f"{user_mention}, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è! {response.lower()}",
        ]

        # Choose response with some randomness
        final_response = random.choice(personality_responses)

        # Send the response
        await message.answer(final_response, parse_mode="HTML")

    except Exception as e:
        logging.error(f"Error in AI Milana handler: {e}")
        # Fallback response with user mention
        user_name = message.from_user.first_name or "–¥—Ä—É–≥"
        user_mention = f"<a href='tg://user?id={message.from_user.id}'>{user_name}</a>"
        await message.answer(f"{user_mention}, –∏–∑–≤–∏–Ω–∏, —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", parse_mode="HTML")

def get_simulated_ai_response(request_text: str) -> str:
    """
    Simulate an AI response. In a real implementation, this would connect to an AI API.
    """
    # Clean the request text
    clean_request = request_text.lower().strip()

    # Homework and study related
    if any(word in clean_request for word in ["–¥–æ–º–∞—à–∫", "–∑–∞–¥–∞–Ω–∏", "—É—Ä–æ–∫", "—É—á–µ–±"]):
        homework_responses = [
            f"–î–æ–º–∞—à–∫–∞? –Ø –ø–æ–º–æ–≥—É! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å '{clean_request}'.",
            f"–° –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ. –ß—Ç–æ —É —Ç–µ–±—è –∑–∞ –ø—Ä–µ–¥–º–µ—Ç?",
            f"–Ø –ª—é–±–ª—é –ø–æ–º–æ–≥–∞—Ç—å —Å —É—Ä–æ–∫–∞–º–∏! –ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞–Ω–∏–µ, —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ —à–∞–≥–∞–º.",
            f"–î–æ–º–∞—à–∫–∞ - —ç—Ç–æ –≤–∞–∂–Ω–æ! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è.",
        ]
        return random.choice(homework_responses)

    # Math related
    elif any(word in clean_request for word in ["–º–∞—Ç–µ–º", "–∞–ª–≥–µ–±—Ä", "–≥–µ–æ–º–µ—Ç—Ä", "–ø—Ä–∏–º–µ—Ä", "–∑–∞–¥–∞—á", "—É—Ä–∞–≤–Ω"]):
        math_responses = [
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ü–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á—É, —Ä–µ—à–∏–º –≤–º–µ—Å—Ç–µ.",
            "–° —á–∏—Å–ª–∞–º–∏ —è –Ω–∞ —Ç—ã! –ß—Ç–æ –∑–∞ –ø—Ä–∏–º–µ—Ä –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å?",
            "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –ª—é–±–∏—Ç —Ç–µ—Ä–ø–µ–ª–∏–≤—ã—Ö. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –∑–∞–¥–∞—á—É —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
            "–ì–µ–æ–º–µ—Ç—Ä–∏—è –∏–ª–∏ –∞–ª–≥–µ–±—Ä–∞? –Ø –ø–æ–º–æ–≥—É —Å –ª—é–±—ã–º —Ä–∞–∑–¥–µ–ª–æ–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏!",
        ]
        return random.choice(math_responses)

    # Russian language related
    elif any(word in clean_request for word in ["—Ä—É—Å—Å–∫", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä", "—Å–æ—á–∏–Ω–µ–Ω–∏", "–¥–∏–∫—Ç–∞–Ω—Ç", "–≥—Ä–∞–º–º–∞—Ç–∏–∫"]):
        russian_responses = [
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –º–æ–π –ª—é–±–∏–º—ã–π –ø—Ä–µ–¥–º–µ—Ç! –° —á–µ–º –ø–æ–º–æ—á—å?",
            "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ –∏–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞? –Ø –≥–æ—Ç–æ–≤–∞ —Ä–∞–∑–±–∏—Ä–∞—Ç—å –ª—é–±–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ.",
            "–°–æ—á–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–ª–æ–∂–µ–Ω–∏–µ? –î–∞–≤–∞–π –Ω–∞–ø–∏—à–µ–º –≤–º–µ—Å—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç.",
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å–ª–æ–≤. –ß—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å?",
        ]
        return random.choice(russian_responses)

    # Questions starting with —á—Ç–æ/–∫–∞–∫/–ø–æ—á–µ–º—É/–∑–∞—á–µ–º
    elif any(clean_request.startswith(word) for word in ["—á—Ç–æ ", "–∫–∞–∫ ", "–ø–æ—á–µ–º—É ", "–∑–∞—á–µ–º "]):
        question_responses = [
            "–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è –≤–º–µ—Å—Ç–µ.",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.",
            "–í–æ–ø—Ä–æ—Å—ã - —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ. –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.",
            "–õ—é–±–ª—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã! –°–ª—É—à–∞—é –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.",
        ]
        return random.choice(question_responses)

    # General help requests
    elif any(word in clean_request for word in ["–ø–æ–º–æ–≥–∏", "–Ω–µ –º–æ–≥—É", "–Ω–µ –∑–Ω–∞—é", "–æ–±—ä—è—Å–Ω–∏"]):
        help_responses = [
            "–ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ.",
            "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤–º–µ—Å—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è. –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
            "–ü–æ–º–æ—â—å –Ω—É–∂–Ω–∞? –Ø –≥–æ—Ç–æ–≤–∞ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ.",
        ]
        return random.choice(help_responses)

    # Simple greetings or mentions
    elif clean_request in ["", "–º–∏–ª–∞–Ω–∞", "–º–∏–ª–∞–Ω—É", "–º–∏–ª–∞–Ω–æ–π", "–º–∏–ª–∞–Ω–µ"]:
        greeting_responses = [
            "–î–∞, —è –∑–¥–µ—Å—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–°–ª—É—à–∞—é —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –ß—Ç–æ –Ω—É–∂–Ω–æ?",
            "–Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å.",
            "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ —Å–µ–≥–æ–¥–Ω—è?",
        ]
        return random.choice(greeting_responses)

    else:
        # General response for other topics
        general_responses = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞ '{clean_request}'! –î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º.",
            "–•–º, –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!",
            "–Ø –ª—é–±–ª—é —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ–±—Å—É–¥–∏—Ç—å?",
            "–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è! –ü–æ–¥–µ–ª–∏—Å—å –¥–µ—Ç–∞–ª—è–º–∏, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
        ]
        return random.choice(general_responses)